/* Generated by AWAG */
import { Component, ElementRef, QueryList, ViewChildren } from '@angular/core';

import { GridEmployeeGridEmployeeInputComponent } from './grid-employee-grid-employee-input.component';
import { AwagSharedModule } from '../../awag/awag-shared.module';
import { AppCommonModule } from '../../common/app-common.module';
import { NgModel } from '@angular/forms';
import { AwagVisibilityState } from '../../awag/awag-visibility.service';
import { AwagError } from '../../awag/awag-error';
import { AwagListController } from '../../awag/awag-listcontroller';

/**
 * @description
 * Screen custom component
 * メニュー：GridEmployee (社員一括メンテ)
 * 画面：Grid-employee-input (社員一括一覧)
 * @extends {GridEmployeeGrid-employee-inputComponent}
 */
@Component({
  selector: 'app-grid-employee-grid-employee-input',
  imports: [AppCommonModule, AwagSharedModule],
  templateUrl: './grid-employee-grid-employee-input.component.html',
  styleUrls: ['../../common/app-common.scss', './grid-employee-grid-employee-input-custom.component.scss'],
  providers: GridEmployeeGridEmployeeInputComponent.providers
})
export class GridEmployeeGridEmployeeInputCustomComponent extends GridEmployeeGridEmployeeInputComponent {

  /**
   * 従業員番号列の入力項目の参照(NgModel)
   */
  @ViewChildren('list_employeeno') listEmployeenos?: QueryList<NgModel>;

  /**
   * 従業員番号列の入力項目の参照(ElementRef)
   */
  @ViewChildren('list_employeeno', { read: ElementRef }) listEmployeenoElementRefs?: QueryList<ElementRef>;

  /**
   * ページ切り替え処理の上書き（表示・編集可否の切り替え処理呼び出しの追加）
   */
  override paginate(list: AwagListController, page: number, target?: string | null): void {
    super.paginate(list, page, target);
    this.changeVisibilityAndEditable();
  }

  /**
   * @description
   * Custom logic for awagGridConfirm (確認へ)
   * @param {*} model Model data of selected items in the grid table
   * @returns Edited model data
   *
  protected override awagGridConfirmCustomLogic(model: any) {
    // customize logic here
    return model;
  }*/

  /**
   * @description
   * Pre API call logic for awagInit (初期処理)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected override awagInitPreCallLogic(model: any) {
    this.changeVisibilityAndEditable();
    return model;
  }

  /**
   * @description
   * API success custom logic for awagInit (初期処理)
   * @param {*} res HTTP response
   * @returns Edited HTTP response
   *
  protected override awagInitSuccessCustomLogic(res: any) {
    // customize logic here
    return res;
  }*/

  /**
   * @description
   * API error custom logic for awagInit (初期処理)
   * @param {*} error HTTP error response
   * @param {*} model Model data of screen
   *
  protected override awagInitErrorCustomLogic(error: any, model: any) {
    // customize logic here
    return model;
  }*/

  /**
   * @description
   * Custom logic for addRow (行追加)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected override addRowCustomLogic(model: any) {
    // 最終ページ
    let lastPage = this.listListCtrl.pager.pagerList[this.listListCtrl.pager.pagerList.length - 1];
    if (super.getDesignType() == 'BS') {
      lastPage = lastPage + 1;
    }
    // 最終ページでない場合にはエラーメッセージを表示
    this.awagAlert.clearAlerts();
    if (this.listListCtrl.pager.pagenum != lastPage) {
      this.showError(new AwagError('E006', this.translate.instant('custom.msg.E006')))
      return this.model;
    }
    // 行を追加
    this.model.list.push({
      'employeeno': '',
      'deptcd': '',
      'name': '',
      'nameen': '',
      'tel': '',
      'starttime': '',
      'closingtime': '',
      'enrollmentStatus': '',
      'role': [],
      'addedRow' : true
    });
    // リストコントローラーを再初期化
    this.listListCtrl.setupPagination(this.model.list, false);
    // 最終ページに移動
    this.listListCtrl.paginate(lastPage);
    // 追加した最終要素を編集可能化
    setTimeout(() => {
      this.setEditable(this.model.list[this.model.list.length - 1].$$awagIndex);
    }, 500);
    return this.model;
  }

  /**
   * 表示・編集可否の切り替え
   */
  private changeVisibilityAndEditable(): void {
    this.visibilityConfig['list']['employeeno'] = AwagVisibilityState.Inactive;
    // 現在表示されているリストの表示変更
    setTimeout(() => {
      if (this.model.list) {
        for (const item of this.model.list) {
          // 追加された行は編集可能項目として表示変更する
          if (item.addedRow) {
            this.setEditable(item.$$awagIndex);
          }
        }
      }
    }, 500);
  }

  /**
   * 指定されたインデックスのリスト要素を編集可能行として処理します。
   * @param index 編集可能項目とするリスト上のインデックス（$$awagIndex）
   */
  private setEditable(index: number) {
    let element: any = null;
    // 最終ページの最終要素に対してDisabledを解除
    this.listEmployeenos?.forEach((ngModel, i) => {
      if (ngModel.name == this.getTargetItemName(index) || ('list-' + ngModel.name == this.getTargetItemName(index))) {
        ngModel.control.enable();
        element = this.listEmployeenoElementRefs?.toArray()[i]?.nativeElement;
      }
    });
    // 読み取り専用の制御項目として補足項目を設定したCSSクラスから対象を選択し、Disabledを解除
    // MCWの場合はMDCTextFieldのDisabledを解除(MCWは他のデザインシステムと実装が異なります)
    if (super.getDesignType() == 'MCW') {
      const mdcTextFieldElement: any = element?.closest('.mdc-text-field');
      if (mdcTextFieldElement?.MDCTextField) {
        mdcTextFieldElement.MDCTextField.foundation.setDisabled(false);
      }
    }
    // CARBON, DEFAULT, SIMPLE, BS
    else {
      element?.closest('.readonly-control-input')?.classList.remove('awag-output--disabled');
    }
  }

  /**
   * 制御対象要素の名前を取得します。
   * @param index 編集可能項目とするリスト上のインデックス（$$awagIndex）
   * @returns 制御対象要素の名前
   */
  private getTargetItemName(index: number): string {
    if (super.getDesignType() == 'CARBON') {
      return 'list__employeeno--' + index.toString();
    } else if (super.getDesignType() == 'BS') {
      return 'list-employeeno-' + index.toString();
    } else {
      return 'employeeno' + index.toString();
    }
  }

}
