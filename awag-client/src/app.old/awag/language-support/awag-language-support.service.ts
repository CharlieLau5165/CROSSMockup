/* Generated by AWAG */
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';

import { AwagCommonService } from '../awag-common.service';
import { AwagLoggerService } from '../logger/awag-logger.service';
import { ConfigItem } from '../awag-config.service';

/**
 * @description
 * AwagLanguageSupportService provides switching page language.
 */
@Injectable({
  providedIn: 'root'
})
export class AwagLanguageSupportService {

  /**
   * @constructor
   * @param {TranslateService} translate
   * @param {AwagConfigService} awagCommon
   * @param {AwagLoggerService} awagLogger
   */
  constructor(
    protected translate: TranslateService,
    protected awagCommon: AwagCommonService,
    protected awagLogger: AwagLoggerService,
  ) { }


  /**
   * Supported language.
   */
  private readonly SUPPORTED_LANGUAGES = ['en', 'ja'];

  /**
   * Default language.
   */
  private readonly DEFAULT_LANGUAGE = 'en';

  /**
   * @description
   * Get current page language.
   * The language is determined in the following order of priority.
   * language set in app menu > language set in browser > default language
   * @returns
   */
  public getCurrentLanguage() {
    let language = this.awagCommon.getConfig().get(ConfigItem.LANGUAGE);

    this.awagLogger.develop(`AwagLanguageSupportService.getCurrentLanguage(): get language from config[${language}]`);
    if (language == null || this.SUPPORTED_LANGUAGES.indexOf(language) < 0) {
      language = this.translate.getBrowserLang();
      this.awagLogger.develop(`AwagLanguageSupportService.getCurrentLanguage(): get language from browser[${language}]`);
    }
    if (language == null || this.SUPPORTED_LANGUAGES.indexOf(language) < 0) {
      language = this.DEFAULT_LANGUAGE;
    }
    this.awagLogger.develop(`AwagLanguageSupportService.getCurrentLanguage(): get language[${language}]`);
    return language;
  }

  /**
   * @description
   * Switch page language.
   * @param {string} language
   */
  public setLanguage(language: string) {
    this.awagLogger.debug(`AwagLanguageSupportService.setLanguage(): set language[${language}]`);
    if (language != null) {
      this.awagCommon.getConfig().set(ConfigItem.LANGUAGE, language);
      this.translate.use(language).subscribe(() => {
        // 表示言語適用時に初期ローディングが表示されていたら解除
        this.stopInitLoading();
      });
      document.documentElement.lang=language;
    }
  }

  /**
   * 言語ラベルの取得が完了するまで表示されている初期ローディングを解除する
   */
  private stopInitLoading() {
    if (document.getElementById('awagOverlay')!.classList.contains('awag-loading-overlay--init')) {
      document.getElementById('awagOverlay')!.classList.add('d-none');
      document.getElementById('awagOverlay')!.classList.remove('awag-loading-overlay--init');
    }
  }

  /**
   * @description
   * translate name value.
   * @param {Array<{ [key: string]: string }>} translationKey
   * @param {Array<{ [key: string]: string }>} target
   */
  public getNameValueTranslated(translationKey: Array<{ [key: string]: string }>, target: Array<{ [key: string]: string }>) {
    target.length = 0;
    this.awagLogger.develop(`AwagLanguageSupportService.getNameValueTranslated(): key[${JSON.stringify(translationKey)}]`);
    for (const element of translationKey) {
      this.awagLogger.develop(`AwagLanguageSupportService.getNameValueTranslated(): element[${JSON.stringify(element)}]`);
      if (!element['name'].trim()) {
        target.push({ name: '   ', value: element['value'] });
      } else {
        target.push({ name: this.translate.instant(element['name']), value: element['value'] });
      }
    }
  }

  /**
   * @description
   * translate hash.
   * @param {{ [key: string]: string }} translationKey
   * @param {{ [key: string]: string }} target
   */
  public getHashTranslated(translationKey: { [key: string]: string }, target: { [key: string]: string }) {
    this.awagLogger.develop(`AwagLanguageSupportService.getHashTranslated(): key[${JSON.stringify(translationKey)}]`);
    for (const key in translationKey) {
      if (target.hasOwnProperty(key)) { // eslint-disable-line no-prototype-builtins
        this.awagLogger.develop(`AwagLanguageSupportService.getHashTranslated(): element[${JSON.stringify(key)}]`);
        target[key] = this.translate.instant('awag.msg.' + key);
      }
    }
  }

  /**
   * @description
   * 翻訳キーを指定して現在の設定言語で翻訳されたラベルを取得します。
   * @param key 翻訳キー
   * @param parameter パラメーター
   * @returns ラベル
   */
  public getTranslated(key: string, parameter: {[key: string]: any} = {}): string {
    return this.translate.instant(key, parameter);
  }

}
