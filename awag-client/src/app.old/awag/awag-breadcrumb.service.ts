/* Generated by AWAG */
import { Injectable } from '@angular/core';
import { NavigationEnd } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';

/**
 * @description
 * パンくずリストを管理するサービスです.
 */
@Injectable({
  providedIn: 'root'
})
export class AwagBreadcrumbService {

  /** パンくずリスト */
  breadcrumbs: Breadcrumb[] = [];

  /**
   * パンくずリスト更新スキップフラグ
   * このフラグがtrueに設定されている場合には、1回だけパンくずリストの更新処理をスキップします。
   */
  private skip = false;

  /** パンくずリストの表示非表示 */
  hide = false;

  constructor(
    private readonly translate: TranslateService
  ) {
  }

  /**
   * @description
   * パンくずリストを非表示にするかどうか
   * @returns パンくずリストの表示・非表示状態
   */
  isHide(): boolean {
    return this.hide;
  }

  /**
   * @description
   * パンくずリストの画面名を更新します。言語切り替えなどで名前を再取得する場合に呼び出す必要があります。
   */
  refresh() {
    this.breadcrumbs.forEach(breadcrumb => {
      breadcrumb.name = this.getScreenNameByUrl(breadcrumb.url);
    });
  }

  /**
   * @description
   * urlから画面名またはユースケース名を取得します。デフォルトではメニュー選択時の名前が画面名ではなくユースケース名になります。
   * メニュー選択時にも画面名を使用する場合にはdontUseUsecaseNameの引数でtrueを指定してください。
   * @param url URL
   * @param dontUseUsecaseName メニュー選択時にも画面名を使用する場合にtrueを指定します
   * @returns 画面名またはユースケース名
   */
  getScreenNameByUrl(url: string, dontUseUsecaseName = false) {
    let name = '';
    url = url.split('?')[0];
    const routes = url.split('/').filter(_route => _route);
    const main = routes[0];
    const sub = routes.length > 1 ? routes[1] : null;
    if (sub && (this.breadcrumbs.length > 1 || dontUseUsecaseName)) {
      name = this.translate.instant('awag.prj.uc.' + main + '.sc.' + sub + '.name');
    } else {
      name = this.translate.instant('awag.prj.uc.' + main + '.name');
      if (name.indexOf('.') >= 0) {
        name = this.translate.instant('awag.label.sc.home');
      }
    }
    return name;
  }

  /**
   * @description
   * パンくずリストをリセットします。
   * @param startFromHome パンくずリストの先頭にHomeを加える場合にはtrueを指定します。
   */
  reset(startFromHome = false) {
    const homeName = this.translate.instant('awag.label.sc.home');
    if (startFromHome) {
      const first = this.breadcrumbs[0];
      if (first?.name == homeName) {
        this.breadcrumbs = this.breadcrumbs.splice(0, 1);
      } else {
        this.breadcrumbs = [];
        this.breadcrumbs.push(new Breadcrumb(homeName, '/home'));
      }
    } else {
      this.breadcrumbs = [];
    }
  }

  /**
   * @description
   * パンくずリストに任意の遷移履歴を追加します。
   * @param url URL
   * @param name 画面名 ※多言語環境の場合に画面名はrefleshBreadcrumbsでURLから再構成される可能性があります。getRouteDisplayNameで取得した値の設定を推奨します。
   */
  add(url: string, name: string) {
    if (url == '/home') {
      this.reset(false);
    }
    this.breadcrumbs.push(new Breadcrumb(name, url));
  }

  /**
   * @description
   * パンくずリストの末尾に新たな画面遷移を追加します。
   * @param navEnd 画面遷移終了イベント
   */
  update(navEnd: NavigationEnd) {
    if (this.skip) {
      this.skip = false;
      return;
    }
    // ログイン画面遷移時はリストを更新しない
    if (navEnd.url.indexOf('login') >= 0) {
      this.hide = true;
      return;
    } else {
      this.hide = false;
    }
    const name = this.getScreenNameByUrl(navEnd.urlAfterRedirects, true);
    const url = navEnd.urlAfterRedirects;
    if (this.breadcrumbs.length > 0) {
      const indexUrl = this.breadcrumbs.findIndex(_breadcrumb => _breadcrumb.url === url);
      const indexName = this.breadcrumbs.findIndex(_breadcrumb => _breadcrumb.name === name);
      if (indexUrl >= 0) {
        this.breadcrumbs = this.breadcrumbs.splice(0, indexUrl + 1);
      } else if (indexName >= 0) {
        this.breadcrumbs = this.breadcrumbs.splice(0, indexName + 1);
      } else {
        this.add(url, name);
      }
    } else {
      this.add(url, name);
    }
  }

  /**
   * trueを設定すると次の画面遷移時にパンくずリストの更新をスキップします。
   * 画面遷移前にfalseが設定された場合には、スキップがキャンセルされた扱いになります。
   * @param skip スキップ
   */
  setSkip(skip: boolean) {
    this.skip = skip;
  }

}

/**
 * @description
 * パンくずリスト
 */
export class Breadcrumb {
  public name: string;
  public url: string;
  constructor(name: string, url: string) {
    this.name = name;
    this.url = url;
  }
}
