/* Generated by AWAG */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

import { AwagBaseService } from './awag-base.service';
import { AwagCommonService } from './awag-common.service';
import { AwagContextService } from './awag-context.service';
import { AwagLoggerService } from './logger/awag-logger.service';
import { AwagLanguageSupportService } from './language-support/awag-language-support.service';

/**
 * @description
 * Name/Valueペアを管理するシングルトンクラスです。
 */
@Injectable({
  providedIn: 'root'
})
export class AwagNameValueService extends AwagBaseService {

  /**
   * @constructor
   * @param {HttpClient} http
   * @param {AwagCommonService} awagCommon
   * @param {AwagContextService} awagContext
   * @param {AwagLoggerService} awagLogger
   * @param {AwagLanguageSupportService} awagLanguageSupport
   */
  constructor(
    protected override http: HttpClient,
    protected override awagCommon: AwagCommonService,
    protected override awagContext: AwagContextService,
    protected override awagLogger: AwagLoggerService,
    protected awagLanguageSupport: AwagLanguageSupportService,
  ) {
    super(http, awagCommon, awagContext, awagLogger);
  }

  /**
   * @description
   * 指定したURLから取得したName/ValueペアをoldValueにロードします。
   * @param url {string} APIのURL
   * @param oldValue Name/Valueペアのリスト
   * @param onSuccess callback function on success
   * @param onError callback function on error
   */
  public loadNameValueFrom(url: string, oldValue: any, onSuccess?: () => void, onError?: (error: any) => void) {
    this.awagLogger.develop('AwagNameValueService.loadNameValueFrom()');
    this.get(url, null).subscribe({
      next: (res) => {
        this.replaceNameValueList(this.fromResponse(res), oldValue);
        if (onSuccess) {
          onSuccess();
        }
      },
      error: (error) => {
        this.loadError(error);
        if (onError) {
          onError(error);
        }
      }
    });
  }

  public loadError(error: any) {
    this.awagLogger.warn('AwagNameValueService.loadError()');
  }

  /**
   * @description
   * @param newValue array of name/value pair
   * @param oldValue array of name/value pair
   */
  public replaceNameValueList(newValue: any, oldValue: any) {
    this.awagLogger.develop('AwagNameValueService.replaceNameValueList()');
    oldValue.length = 0;
    for (const key of newValue) {
      oldValue.push(key);
    }
  }

  /**
   * @description
   * extract list from API response
   * @param res response data from API
   */
  protected fromResponse(res: any): any {
    if (res == null) {
      res = [];
    } else if (res === '') {
      res = [];
    } else {
      res = res.list;
    }
    return res;
  }

}
