/* Generated by AWAG */
import { Injectable } from '@angular/core';

/**
 * @description
 * 処理対象のファイル一覧(FileList)を制御するための機能を提供します。
 */
@Injectable({
  providedIn: 'root'
})
export class AwagFilelistService {

  /**
   * @description
   * ファイル一覧(FileList)がファイル項目別にキー管理されているオブジェクトです。
   */
  private _files: any = {};

  /**
   * @description
   * ファイル一覧(FileList)がファイル項目別にキー管理されているオブジェクトを取得します。
   * @returns ファイル一覧(FileList)がファイル項目別にキー管理されているオブジェクト
   */
  public get files(): any {
    return this._files;
  }

  /**
   * @description
   * ファイル一覧がファイル項目別にキー管理されているオブジェクトを設定します。
   * @param value ファイル一覧がファイル項目別にキー管理されているオブジェクト
   */
  public set files(value: any) {
    this._files = value;
  }

  /**
   * @description
   * ファイル一覧がファイル項目別にキー管理されているオブジェクトを初期化します。
   */
  public clear() {
    this._files = {};
  }

  /**
   * @description
   * ファイルを選択したinput要素のIDを指定して、ファイル一覧(FileList)を追加します。
   * @param fileId - ファイルを選択したinput要素のID
   * @param fileList - ファイル一覧(FileList)
   */
  public setFileList(fileId: string, fileList: FileList) {
    this.files[fileId] = fileList;
  }

  /**
   * @description
   * 指定されたIDの要素に対して、指定されたファイルIDのファイルが画像の場合にプレビューを表示します。
   * ファイルが複数保持されている場合には最初のファイルに対するプレビューを表示します。
   * @param previewId - プレビューを表示するimg要素のID
   * @param data - プレビューするファイルを選択したinput要素のID
   */
  public setPreview(previewId: string, file: any) {
    const element = document.getElementById(previewId) as HTMLInputElement;
    if (element != null && file?.type.match('image.*')) {
      const reader = new FileReader();
      reader.addEventListener('load', () => {
        element.src = reader.result as string;
        element.classList.remove('awag-hidden');
      }, false);
      reader.readAsDataURL(file);
    }
  }

  /**
   * @description
   * 指定されたプレビューを表示するimg要素に指定されたsrc属性をクリアします。
   * @param previewId - プレビューを表示するimg要素のID
   */
  public removePreview(previewId: string) {
    const element = document.getElementById(previewId) as HTMLInputElement;
    if (element != null) {
      element.src = '';
    }
  }

  /**
   * @description
   * ファイルを選択したinput要素のIDを指定して、管理されているファイル一覧からファイルを除去します。
   * @param fileId - ファイルを選択したinput要素のID
   * @param [index] - (オプショナル) ファイル一覧(FileList)に対する除去対象のインデックス。指定されない場合はファイル一覧が除去されます。
   */
  public removeFile(fileId: string, index?: number) {
    const element = document.getElementById(fileId)! as HTMLInputElement;
    if (index !== undefined) {
      // 指定されたIDに対するファイル一覧(FileList)から指定されたインデックスのファイルを除去
      const newDataTransfer = new DataTransfer();
      for(const file of this._files[fileId]){
        newDataTransfer.items.add(file);
      }
      newDataTransfer.items.remove(index); 
      // 0件になったらファイル一覧(FileList)を除去
      if (newDataTransfer.files.length == 0) {
        delete this._files[fileId];
        if (element) element.value = '';
      }
      // 1件以上なら処理結果を反映
      else {
        this._files[fileId] = newDataTransfer.files;
        if (element) element.files = newDataTransfer.files;
      }
    } else {
      // 指定されたIDに対するファイル一覧(FileList)を除去
      delete this._files[fileId];
      if (element) element.value = '';
    }
    // 変更イベントを送信
    if (element) element.dispatchEvent(new Event('change'));
  }

}
