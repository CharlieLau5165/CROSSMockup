/* Generated by AWAG */
import { HttpClient, HttpHeaders, HttpErrorResponse, HttpResponse, HttpParams } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import { saveAs } from 'file-saver';

import { AwagCommonService } from './awag-common.service';
import { AwagContextService } from './awag-context.service';
import { AwagLoggerService } from './logger/awag-logger.service';
import { AwagError } from './awag-error';
import { AWAG_COMMON_MESSAGES } from './awag-common-messages';

/**
 * @description
 * 画面イベントサービスの基底クラス。バックエンドAPIを呼び出す際の共通処理を提供します。
 */
export class AwagBaseService {

  /**
   * @constructor
   * @param {HttpClient} http
   * @param {AwagCommonService} awagCommon
   * @param {AwagContextService} awagContext
   * @param {AwagLoggerService} awagLogger
   */
  constructor(
    protected http: HttpClient,
    protected awagCommon: AwagCommonService,
    protected awagContext: AwagContextService,
    protected awagLogger: AwagLoggerService,
  ) {
  }

  /**
   * @description
   * APIのBase URLをenvironment.*.ts.から取得します。 (host and port. sample:http://sample.com:9080/)
   * @returns {string} APIのBase url
   */
  protected getApiBaseUrl(): string {
    return this.awagCommon.getEnvironment().apiBaseUrl;
  }

  /**
   * @description
   * HTTP Postをリクエストします。
   * @param {string} url URL
   * @param {*} model Model
   * @param [awagOptions] AWAG Option
   * @returns {Observable<any>} Http call (Observable)
   */
  protected post(url: string, model: any, awagOptions?: any): Observable<any> {
    const body = this.clearEmptyParams(model);
    const postOptions: {
      headers?: HttpHeaders;
      observe: 'response';
      responseType?: 'json';
    } = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      observe: 'response',
      responseType: 'json'
    };
    return this.http.post<any>(url, body, postOptions).pipe(
      map(res => (awagOptions?.observe == 'response') ? res : res.body),
      catchError(errorRes => this.handleError(errorRes, awagOptions))
    );
  }

  /**
   * @description
   * HTTP multipart/form-data POSTをリクエストします。
   * @param {string} url URL
   * @param {*} model Model
   * @param [awagOptions] AWAG Option
   * @returns {Observable<any>} Http call (Observable)
   */
  protected postByMultipart(url: string, model: any, awagOptions?: any): Observable<any> {
    const formData = this.createFormData(new FormData(), model);
    model = this.clearEmptyParams(model);
    formData.append('awag_base', new Blob([JSON.stringify(model)], { type: 'application/json' }));
    const postOptions: {
      observe: 'response';
      responseType?: 'json';
    } = {
      observe: 'response',
      responseType: 'json'
    };
    return this.http.post<any>(url, formData, postOptions).pipe(
      map(res => (awagOptions?.observe == 'response') ? res : res.body),
      catchError(errorRes => this.handleError(errorRes, awagOptions))
    );
  }

  /**
   * @description
   * HTTP multipart/form-data PUTをリクエストします。
   * @param {string} url URL
   * @param {*} model Model
   * @param [awagOptions] AWAG Option
   * @returns {Observable<any>} Http call (Observable)
   */
  protected putByMultipart(url: string, model: any, awagOptions?: any): Observable<any> {
    const formData = this.createFormData(new FormData(), model);
    model = this.clearEmptyParams(model);
    formData.append('awag_base', new Blob([JSON.stringify(model)], { type: 'application/json' }));
    const putOptions: {
      observe: 'response';
      responseType?: 'json';
    } = {
      observe: 'response',
      responseType: 'json'
    };
    return this.http.put<any>(url, formData, putOptions).pipe(
      map(res => (awagOptions?.observe == 'response') ? res : res.body),
      catchError(errorRes => this.handleError(errorRes, awagOptions))
    );
  }

  /**
   * @description
   * multipartのリクエストBodyを構築します。
   * @param {FormData} fd form data
   * @param {*} model Model
   * @returns {FormData} form data.
   */
  private createFormData(fd: FormData, model: any): FormData {
    for (const key in model) {
      if (model[key] instanceof FileList) {
        for (const fileEntry of Array.from(model[key])) {
          fd.append(key, <Blob>fileEntry);
        }
        model[key] = undefined;
      } else if (isNaN(parseFloat(key))) {
        fd = this.createFormData(fd, model[key]);
      }
    }
    return fd;
  }

  /**
   * @description
   * HTTP GETをリクエストします。
   * @param {string} url URL
   * @param {*} model Model
   * @param [awagOptions] AWAG Option
   * @returns {Observable<any>} Http call (Observable)
   */
  protected get(url: string, model: any, awagOptions?: any): Observable<any> {
    const params = this.clearEmptyParams(model);
    const getOptions: {
      observe: 'response';
      params?: HttpParams;
      responseType?: 'json';
    } = {
      observe: 'response',
      params: new HttpParams().appendAll(params),
      responseType: 'json'
    };
    return this.http.get<any>(url, getOptions).pipe(
      map(res => (awagOptions?.observe == 'response') ? res : res.body),
      catchError(errorRes => this.handleError(errorRes, awagOptions))
    );
  }

  /**
   * @description
   * HTTP GETをリクエストします。応答をBlobとして取得します。
   * @param {string} url URL
   * @param {*} model Model
   * @param [awagOptions] AWAG Option
   * @returns {Observable<any>} Http call (Observable)
   */
  protected getAsBlob(url: string, model: any, awagOptions?: any): Observable<any> {
    const params = this.clearEmptyParams(model);
    const getOptions: {
      observe: 'response';
      params?: HttpParams;
      responseType: 'blob';
    } = {
      observe: 'response',
      params: new HttpParams().appendAll(params),
      responseType: 'blob'
    };
    return this.http.get(url, getOptions).pipe(
      tap(res => this.setupBlobname(res)),
      map(res => (awagOptions?.observe == 'response') ? res : res.body),
      catchError(errorRes => this.handleError(errorRes, awagOptions))
    );
  }

  /**
   * Blob.nameに応答ヘッダーで指定されているファイル名を指定して、file-saver内部の処理で参照している値を構成する。
   * 別途saveAsFileにてファイル名を指定する引数を指定することでファイル名を上書き指定可能です。
   * @param res HttpResponse<Blob>
   */
  private setupBlobname(res: HttpResponse<Blob>) {
    const blob = res.body;
    const contentDisposition = res.headers.get('Content-Disposition');
    if (contentDisposition && blob) {
      // extract filename info from Content-Disposition
      const arr = contentDisposition.split(';');
      for (const str of arr) {
        const index = str.indexOf('filename=');
        if (index === -1) {
          continue;
        }
        let filename = str.substring(index + 'filename='.length).trim();
        filename = filename.replace(/'/g, '');
        filename = filename.replace(/"/g, '');
        (blob as any).name = this.fixedDecodeURIComponent(filename);
        break;
      }
    }
  }

  /**
   * HttpResponseのBlogデータを保存します。
   * この処理はfile-saverに依存しています。
   * @param res HttpResponse or HttpResponse Body
   * @param name ファイル名
   */
  public saveAsFile(res: any, name: string | undefined = undefined): void {
    let blob = res;
    if (res instanceof HttpResponse) {
      blob = res.body;
    }
    if (blob) {
      saveAs(blob, name);
    }
  }

  /**
   * @description
   * HTTP PUTをリクエストします。
   * @param {string} url URL
   * @param {*} model Model
   * @param [awagOptions] AWAG Option
   * @returns {Observable<any>} Http call (Observable)
   */
  protected put(url: string, model: any, awagOptions?: any): Observable<any> {
    const body = this.clearEmptyParams(model);
    const putOptions: {
      headers?: HttpHeaders;
      observe: 'response';
      responseType?: 'json';
    } = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      observe: 'response',
      responseType: 'json'
    };
    return this.http.put<any>(url, body, putOptions).pipe(
      map(res => (awagOptions?.observe == 'response') ? res : res.body),
      catchError(errorRes => this.handleError(errorRes, awagOptions))
    );
  }

  /**
   * @description
   * HTTP DELETEをリクエストします。
   * @param {string} url URL
   * @param {*} model Model
   * @param [awagOptions] AWAG Option
   * @returns {Observable<any>} Http call (Observable)
   */
  protected delete(url: string, model: any, awagOptions?: any): Observable<any> {
    const body = this.clearEmptyParams(model);
    const deleteOptions: {
      body?: any;
      headers?: HttpHeaders;
      observe: 'response';
      responseType?: 'json';
    } = {
      body: body,
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      observe: 'response',
      responseType: 'json'
    };
    return this.http.request<any>('delete', url, deleteOptions).pipe(
      map(res => (awagOptions?.observe == 'response') ? res : res.body),
      catchError(errorRes => this.handleError(errorRes, awagOptions))
    );
  }

  /**
   * @description
   * HTTPのエラー応答をハンドルします。
   * @param {HttpErrorResponse} errorRes HTTP error response.
   * @param [awagOptions] AWAG Option
   * @returns Throw error.
   */
  handleError = (errorRes: HttpErrorResponse, awagOptions?: any): Observable<unknown> => {
    return AwagBaseService.handleError(this.awagLogger, errorRes, awagOptions);
  }

  /**
   * @description
   * 空(null)のJSONパラメータを削除します。
   * @param {*} input json object.
   * @returns json
   **/
  protected clearEmptyParams(input: any): any {
    if (Array.isArray(input)) {
      return this.clearEmptyArray(input);
    } else {
      return this.clearEmptyValues(input);
    }
  }

  /**
   * @description
   * 空(null)のJSONパラメータを指定したarrayから削除します。
   * @param {*} input json array.
   * @returns json
   */
  private clearEmptyArray(input: any): any {
    const ar = [];
    for (const item of input) {
      if(typeof item === 'object'){
        ar.push(this.clearEmptyValues(item));
      } else {
        ar.push(item);
      }
    }
    return ar;
  }

  /**
   * @description
   * 指定したオブジェクトから空(null)の値を削除します。
   * @param {*} input json object.
   * @returns json
   */
  private clearEmptyValues(input: any): any {
    const out: { [index: string]: any } = {};
    for (const key in input) {
      if (key.startsWith('_awag_')) {
        continue;
      }
      if (Array.isArray(input[key])) {
        out[key] = this.clearEmptyArray(input[key]);
      } else if (Object.prototype.toString.call(input[key]) === '[object Date]') {
        out[key] = input[key].getFullYear() + '-' + ('0' + (input[key].getMonth() + 1)).slice(-2) + '-' + ('0' + input[key].getDate()).slice(-2);
      } else if (typeof input[key] === 'string' || typeof input[key] === 'number' || typeof input[key] === 'boolean') {
        out[key] = input[key];
      } else if (input[key] !== null && typeof input[key] === 'object') {
        out[key] = this.clearEmptyValues(input[key]);
      }
    }
    return out;
  }

  /**
   * @description
   * RFC3986向けencodeURIComponent
   * @param {string} input target strings.
   * @returns encoded strings.
   */
  protected fixedEncodeURIComponent(input: string): string {
    return encodeURIComponent(input).replace(/[!'()*]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16);
    });
  }

  /**
   * @description
   * decodeURIComponent
   * @param {string} input target strings.
   * @returns decoded strings.
   */
  protected fixedDecodeURIComponent(input: string): string {
    return decodeURIComponent(input.replace(/\+/g, ' '));
  }
  /**
   * @description
   * HTTPのエラー応答をハンドルします。
   * @param {HttpErrorResponse} errorRes HTTP error response.
   * @param [awagOptions] AWAG Option
   * @returns Throw error.
   */
  public static readonly handleError = (awagLogger: AwagLoggerService | null, errorRes: HttpErrorResponse, awagOptions?: any): Observable<unknown> => {
    awagLogger?.develop('AwagBaseService.handleError():');
    // 一般のエラー
    if (errorRes.error?.code && errorRes.error?.message) {
      awagLogger?.warn(`AwagBaseService.handleError():API error: [${errorRes.status}] ${errorRes.error.code} ${errorRes.error.message} `);
      return throwError(() => (awagOptions?.observe == 'response') ? errorRes : errorRes.error);
    }
    // FileDownload時のエラー
    if (errorRes.error instanceof Blob && errorRes.error.type === 'application/json') {
      awagLogger?.warn(errorRes);
      awagLogger?.warn(`AwagBaseService.handleError():API error: [${errorRes.status}] ${errorRes.statusText} `);
      const reader: FileReader = new FileReader();
      const blobObservable = new Observable((observer: any) => {
        reader.onloadend = (e: Event) => {
          const newErrorRes = AwagBaseService.createHttpErrorResponse(errorRes, JSON.parse(reader.result as string));
          observer.error((awagOptions?.observe == 'response') ? newErrorRes : newErrorRes.error);
          observer.complete();
        }
      });
      reader.readAsText(errorRes.error);
      return blobObservable;
    }
    // その他のエラー（ステータスコード応答のエラー等）
    awagLogger?.warn(errorRes);
    awagLogger?.warn(`AwagBaseService.handleError():API error: [${errorRes.status}] ${errorRes.statusText} `);
    let message = AWAG_COMMON_MESSAGES['BASE_COMPONENT_API_RES_' + errorRes.status];
    if (!message) {
      message = AWAG_COMMON_MESSAGES['BASE_COMPONENT_API_RES_DEFAULT'];
    }
    const newErrorRes = AwagBaseService.createHttpErrorResponse(errorRes, new AwagError(errorRes.status, message));
    return throwError(() => (awagOptions?.observe == 'response') ? newErrorRes : newErrorRes.error);
  }

  /**
   * 内部処理用にHttpErrorResponseを再作成します。
   * @param errorRes HttpErrorResponse
   * @param error HttpErrorResponse.error
   * @returns HttpErrorResponse
   */
  private static createHttpErrorResponse(errorRes: HttpErrorResponse, error: any): HttpErrorResponse {
    return new HttpErrorResponse({
      error: error,
      headers: errorRes.headers,
      status: errorRes.status,
      statusText: errorRes.statusText,
      url: errorRes.url ?? undefined
    });
  }

}
