/* Generated by AWAG */
import { OnInit, AfterViewInit, OnDestroy, Directive } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';

import { AwagBaseComponent } from '../awag/awag-base.component';
import { AwagCommonService } from '../awag/awag-common.service';
import { AwagContextService } from '../awag/awag-context.service';
import { AwagLoggerService } from '../awag/logger/awag-logger.service';
import { AwagAlertService } from '../awag/alert/service/awag-alert.service';
import { AwagLanguageSupportService } from '../awag/language-support/awag-language-support.service';

/**
 * @description
 * Home custom component.
 * @extends {HomeComponent}
 * @implements {OnInit}
 */
@Directive()
export class HomeComponent extends AwagBaseComponent implements OnInit, AfterViewInit, OnDestroy {

  /**
   * Message for displaying on the home page.
   */
  message: string | null = null;

  /**
   * @constructor
   * @param {Router} router
   * @param {AwagCommonService} awagCommon
   * @param {AwagContextService} awagContext
   * @param {AwagLoggerService} awagLogger
   * @param {AwagAlertService} awagAlert
   * @param {AwagLanguageSupportService} awagLanguageSupport
   * @param {TranslateService} translate
   */
  constructor(
    protected override router: Router,
    protected override awagCommon: AwagCommonService,
    protected override awagContext: AwagContextService,
    protected override awagLogger: AwagLoggerService,
    protected override awagAlert: AwagAlertService,
    protected override awagLanguageSupport: AwagLanguageSupportService,
    protected translate: TranslateService,
  ) {
    super(router, awagCommon, awagContext, awagLogger, awagAlert, awagLanguageSupport);
  }

  /**
   * @description
   * OnInit lifecycle hook.
   */
  ngOnInit() {
    this.subscription.add(this.translate.stream('awag.prj.name').subscribe((res: string) => { window.document.title = res; }));
    this.model = this.getModelOnInit('home');
    this.awagContext.setNavigateError(false);
    this.showError(this.getErrorOnInit());
    this.subscription.add(this.translate.stream(this.awagContext.getMessage()).subscribe((res: string) => { this.message = res; }));
  }

  /**
   * @description
   * AfterViewInit lifecycle hook.
   */
  ngAfterViewInit() {
    this.awagAfterViewInit();
  }

  /**
   * @description
   * OnDestroy lifecycle hook.
   */
  ngOnDestroy() {
    this.awagOnDestroy();
  }

  /**
   * @description
   * Start process of usecase menu .
   */
  start() {
    this.awagContext.clear();
    this.awagCommon.getBreadcrumb().reset(true);
  }
}
