/* Generated by AWAG */
import { Injectable } from '@angular/core';

import { AwagAlert } from '../awag-alert';
import { AwagContextService } from '../../awag-context.service';

/**
 * @description
 * アラートの一覧を管理するサービスです
 */
@Injectable({
  providedIn: 'root'
})
export class AwagAlertService {

  /**
   * アラート一覧
   */
  private alerts: AwagAlert[] = [];

  /**
   * モーダル表示時のアラート一覧
   */
  private alertsModal: AwagAlert[] = [];

  /**
   * @constructor
   * @param awagContext 
   */
  constructor(
    private readonly awagContext: AwagContextService,
  ) {}

  /**
   * @description
   * アラート一覧を返します
   * @param isModal モーダル表示状態であるかどうか
   * @returns アラート一覧
   */
  getAlerts(isModal: boolean): AwagAlert[] {
    if (isModal) { // NOSONAR
      return this.alertsModal;
    } else {
      return this.alerts;
    }
  }

  /**
   * @description
   * AwagAlert インスタンスまたはエラーコード、メッセージ、スタイルを引数として受け取り、次の Alert をプッシュします。
   * 
   * @param codeOrAlert - AwagAlert のインスタンス、またはエラーコードを文字列として指定します。
   * @param [message=''] - エラーメッセージを指定します。codeOrAlert が AwagAlert のインスタンスの場合、このパラメーターは無視されます。省略した場合、デフォルト値は空文字列です。
   * @param [style='error'] - スタイルを指定します。codeOrAlert が AwagAlert のインスタンスの場合、このパラメーターは無視されます。省略した場合、デフォルト値は 'error' です。
   */
  pushAlert(codeOrAlert: string | AwagAlert, message = '', style = 'error'): void {
    const isModal = (this.awagContext.getModalContext() != null);
    if (typeof codeOrAlert === 'string') {
      this.getAlerts(isModal).push(new AwagAlert(codeOrAlert, message, style));
    } else {
      this.getAlerts(isModal).push(codeOrAlert);
    }
  }

  /**
   * @description
   * 既存のアラートをクリアして、単一のアラートを設定します
   * @param alerts アラート
   */
  setAlert(alert: AwagAlert) {
    const isModal = (this.awagContext.getModalContext() != null);
    this.clearAlerts();
    this.getAlerts(isModal).push(alert);
  }

  /**
   * @description
   * 複数のアラートを追加します
   * @param alerts 複数のアラート
   */
  pushAlerts(alerts: AwagAlert[]) {
    const isModal = (this.awagContext.getModalContext() != null);
    alerts.forEach(alert => {
      this.getAlerts(isModal).push(alert);
    });
  }

  /**
   * @description
   * 既存のアラートをクリアして、複数のアラートを設定します
   * @param alerts 複数のアラート
   */
  setAlerts(alerts: AwagAlert[]) {
    if (this.awagContext.getModalContext()) {
      this.alertsModal = alerts;
    } else {
      this.alerts = alerts;
    }
  }

  /**
   * @description
   * 既存のアラートを全てクリアします
   */
  clearAlerts() {
    if (this.awagContext.getModalContext()) {
      this.alertsModal = [];
    } else {
      this.alerts = [];
    }
  }

  /**
   * @description
   * 指定されたインデックスのアラートを除去します
   * @param index インデックス
   */
  removeAlerts(index: number) {
    const isModal = (this.awagContext.getModalContext() != null);
    this.getAlerts(isModal).splice(index, 1);
  }

}
