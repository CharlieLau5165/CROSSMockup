/* Generated by AWAG */
import { Observable, Subject } from 'rxjs';

/**
 * @description
 * テーブルのリストデータを制御するクラスです。
 * - ソート
 * - ページネーション
 */
export class AwagListController {
  /**
   * @description
   * オリジナルの並び替え情報を保持するフィールド名
   */
  static readonly AWAG_INDEX_FIELD = '$$awagIndex';

  /**
   * @description
   * デフォルトのソート順序を表す定数
   */
  static readonly DEFAULT_ASC = 'DEFAULT_ASC';
  static readonly DEFAULT_DESC = 'DEFAULT_DESC';

  /**
   * @description
   * ソート順序を表す定数
   */
  static readonly DIRECTION_ASC = 1;
  static readonly DIRECTION_DESC = -1;

  /**
   * @description
   * ページあたりの最大件数
   */
  static readonly MIN_NUM_PER_PAGE = 10;

  /**
   * @description
   * オリジナルリストへの参照
   */
  list: any = [];

  /**
   * @description
   * ページャー情報
   */
  pager: any = {
    start: 0,
    len: AwagListController.MIN_NUM_PER_PAGE,
    lenList: [
      AwagListController.MIN_NUM_PER_PAGE,
      AwagListController.MIN_NUM_PER_PAGE * 2,
      AwagListController.MIN_NUM_PER_PAGE * 3,
      AwagListController.MIN_NUM_PER_PAGE * 4,
      AwagListController.MIN_NUM_PER_PAGE * 5
    ],
    pagerList: [],
    pagenum: 1,
    end: AwagListController.MIN_NUM_PER_PAGE,
    checkAll: [],
  };

  /**
   * @description
   * 現在のソートキー
   */
  sortKey = AwagListController.AWAG_INDEX_FIELD;

  /**
   * @description
   * 項目が選択されているかのフラグ
   */
  modelSelected: boolean;

  /**
   * イベント
   */
  private readonly eventSubject = new Subject<string>();

  /**
   * @constructor
   * @param array original array
   * @param key initial sort key (nullable)
   */
  constructor(array: any[], key: string | null) {
    this.list = array;
    if (key) {
      this.sortKey = key;
      this.sortList(key);
    }
    this.modelSelected = false;
    this.pager = this.setupPagination(this.list);
  }

  /**
   * 一覧イベント
   */
  get event(): Observable<string> {
    return this.eventSubject.asObservable();
  }

  /**
   * @description
   * ページあたりの件数を変更します。
   * @param pageSize 件数
   * @returns pager info
   */
  changelen(pageSize: number) {
    if (isNaN(pageSize)) {
      return;
    }
    this.pager.len = pageSize;
    this.setupPagination(this.list);
    return this.pager;
  }

  /**
   * @description
   * リストをソートします。
   * @param key {string} ソートキー。現在のソートキーと同じ値が指定された場合、逆順でソートします。
   */
  sortList(key: string) {
    if (!key) {
      key = AwagListController.AWAG_INDEX_FIELD;
    }
    let direct = 0;
    const orgKey = this.sortKey;
    if (!orgKey.endsWith(key)) {
      this.sortKey = key;
    }
    if (orgKey.startsWith('-') || !orgKey.endsWith(key) ) {
      direct = AwagListController.DIRECTION_ASC;
      this.sortKey = '+' + key;
    } else {
      direct = AwagListController.DIRECTION_DESC;
      this.sortKey = '-' + key;
    }
    this.list.sort((a: any, b: any) => {
      let aValue = a[key];
      let bValue = b[key];
      if (aValue == undefined && bValue == undefined && key.split('.').length > 1) { // keyがドット区切りの場合に2階層までソートに対応
        aValue = a[key.split('.')[0]]?.[key.split('.')[1]];
        bValue = b[key.split('.')[0]]?.[key.split('.')[1]];
      }
      if (key == AwagListController.DEFAULT_ASC) {
        return a[AwagListController.AWAG_INDEX_FIELD] - b[AwagListController.AWAG_INDEX_FIELD];
      } else if (key == AwagListController.DEFAULT_DESC) {
        return b[AwagListController.AWAG_INDEX_FIELD] - a[AwagListController.AWAG_INDEX_FIELD];
      } else if ((aValue != null) && (bValue == null || bValue.trim() === '' || (isNaN(aValue) ? aValue : Number(aValue)) > (isNaN(bValue) ? bValue : Number(bValue)))) {
        return direct;
      } else if ((bValue != null) && (aValue == null || aValue.trim() === '' || (isNaN(aValue) ? aValue : Number(aValue)) < (isNaN(bValue) ? bValue : Number(bValue)))) {
        return -direct;
      } else {
        return 0;
      }
    });
  }

  /**
   * @description
   * ページを遷移します。
   * @param pageNum target page number (0 origin)
   * @returns pager info
   */
  paginate(pageNum: number) {
    if (isNaN(pageNum)) {
      return;
    }
    this.pager.start = this.pager.len * (pageNum - 1);
    this.pager.pagenum = pageNum;
    this.pager.end = this.pager.len * pageNum;
    if (this.pager.end > this.list.length) {
      this.pager.end = this.list.length;
    }
    return this.pager;
  }

  /**
   * @description
   * ページャー情報をセットアップします。
   * @param list オリジナルのリスト
   * @param pagination enable or disable
   */
  setupPagination(list: any[], pagination = true): any {
    const pager = this.pager;
    if (!list) {
      list = [];
    }
    this.list = list;
    for (let i = 0; i < list.length; i++) {
      list[i][AwagListController.AWAG_INDEX_FIELD] = i;
    }
    pager.len ??= pager.lenList[0];
    pager.pagerList = [];
    for (let i = 0; i < Math.floor((list.length - 1) / pager.len) + 1; i++) {
      pager.pagerList[i] = i;
    }
    pager.start = 0;
    pager.pagenum = 1;
    pager.end = pager.len;
    if (pager.end > list.length) {
      pager.end = list.length;
    }
    if (!pagination) {
      pager.end = list.length;
    }
    this.sortKey = AwagListController.AWAG_INDEX_FIELD;
    this.eventSubject.next('setupPagination');
    return pager;
  }

  /**
   * @description
   * 全選択チェックボックスによる選択チェックボックスの一括操作を行います
   * @param value 選択チェックボックスを全てチェックする場合にはtrue、全てチェックを外す場合はfalse
   */
  changeSelectAll(value: any) {
    this.changeAll('selected', value);
    this.pager.selectAll[this.pager.pagenum] = !this.pager.selectAll[this.pager.pagenum];
  }

  /**
   * @description
   * 指定された項目の値を一括で変更します。
   * @param name 項目ID
   * @param value 値
   */
  changeAll(name: string, value: any) {
    for (let index = this.pager.start; index < this.pager.end; index++) {
      this.list[index][name] = value;
    }
    this.updateCheckAll(name, value);
  }

  /**
   * @description
   * 項目の全選択状態を更新します
   * @param name 全選択項目名
   * @param value 選択状態の値
   */
  updateCheckAll(name: string, value: any, async = false) {
    const index = this.pager.pagenum - 1;
    if (async) {
      if (this.pager.checkAll[index]) {
        this.pager.checkAll[index][name] = {};
      }
      setTimeout(() => {
        this.updateCheckAll(name, value);
      });
      return;
    }
    while (this.pager.checkAll.length <= index) {
      this.pager.checkAll.push({});
    }
    this.pager.checkAll[index][name] = {
      checked: this.isAllValuesEqual(name, value),
      indeterminate: this.isPartialValuesEqual(name, value)
    }
  }

  /**
   * @description
   * リスト内の指定された項目名の値を確認して、全て指定された値であるかどうかの結果を返します。
   * @param name リスト内の項目名
   * @param value 項目の値
   * @returns 全て指定された値である場合はtrueを返します。全てが一致しなかった場合、またはリストが0件の場合はfalseを返します。
   */
  isAllValuesEqual(name: string, value: any): boolean {
    const start = this.pager.start;
    const end = this.pager.end;
    if (start >= end) return false; // 空の範囲または無効な範囲
    for (let i = start; i < end; i++) {
      if (this.list[i][name] !== value) {
        return false; // 一致しない値が見つかった場合、すぐにfalseを返す
      }
    }
    return true; // 全ての要素が一致した場合
  }

  /**
   * @description
   * リスト内の指定された項目名の値を確認して、一部だけが指定された値に一致するするかどうかの結果を返します。
   * @param name リスト内の項目名
   * @param value 項目の値
   * @returns 一部が指定された名前である場合はtrueを返します。全てが一致した場合、または全てが一致しなかった場合、またはリストが0件の場合はfalseを返します。
   */
  isPartialValuesEqual(name: string, value: any): boolean {
    const start = this.pager.start;
    const end = this.pager.end;
    if (start >= end) return false; // 空の範囲または無効な範囲
    let matchCount = 0;
    for (let i = start; i < end; i++) {
      if (this.list[i][name] === value) {
        matchCount++;
      }
    }
    return (matchCount > 0 && matchCount < (end - start)); // 一部が一致し、全てが一致しない場合にtrueを返す
  }

  /**
   * 行の選択状態を確認します。
   * @returns 行が選択状態にある場合はtrue、選択状態にない場合はfalseを返します。
   */
  isSelected(): boolean {
    if (this.modelSelected) {
      return true;
    } else if (this.list) {
      for (const item of this.list) {
        if (item.selected) {
          return true;
        }
      }
    }
    return false;
  }

}
