/* Generated by AWAG */
/**
 * @description
 * AwagCsvExporter outputs JSON data of list format as a CSV file.
 */
export class AwagCsvExporter {

  /**
   * @description
   * Generate CSV file download action with specifying matrix data and file name
   * @param headerList {any} header data
   * @param listItem {any} matrix data
   * @param filename {string} file name
   */
  public exportCsv(headerList: any, listItem: any, filename: string) {
    let bom = new Uint8Array([]);
    if (listItem != null || headerList != null) {
      bom = new Uint8Array([0xEF, 0xBB, 0xBF]); // BOM
    }
    listItem ??= [];
    const csv = this.jsonToCsv(headerList, listItem, ','); // to CHAR conversion.
    // to BLOB conversion, and add BOM.
    const blob = new Blob([bom, csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a'); // Create anchor, fire click event.
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }

  /**
   * @description
   * Create CSV data by concatenating columns with the specified delimiter and concatenating rows with LF line breaks.
   * @param headerList {any} header data
   * @param listItem {any} matrix data
   * @param delimiter {string} delimiter
   */
  jsonToCsv(headerList: any, listItem: any, delimiter: string): string {
    const linefeed = '\n';
    let header = '';
    if (headerList != null && headerList != '') {
      header = headerList.join(delimiter) + linefeed;
    }
    const body = listItem.map(function (d: any) {
      return Object.keys(d).map(function (key) {
        return d[key];
      }).join(delimiter);
    }).join(linefeed);
    return header + body;
  }

}