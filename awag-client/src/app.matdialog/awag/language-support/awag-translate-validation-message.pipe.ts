/* Generated by AWAG */
import { Pipe, PipeTransform } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { map, take } from 'rxjs/operators';

/**
 * @description TranslateValidationMessagePipe
 * @class TranslateValidationMessagePipe
 * @implements {PipeTransform}
 */
@Pipe({
  name: 'translateValidationMessage', pure: false
})
export class AwagTranslateValidationMessagePipe implements PipeTransform {

  private lastFormatType = '';
  private lastMinLength = -1;
  private lastMaxLength = -1;
  private lastTranslatedValue = '';
  private lastLang = '';
  private lastIsMessage = false;

  constructor(
    protected translate: TranslateService) {
  }

  /**
   * @description get validation message key for length message.
   * @param {number} minLength
   * @param {number} maxLength
   * @returns
   */
  getLengthTranslationKey(minLength: number, maxLength: number) {
    if (minLength === maxLength) {
      return 'awag.msg.Format.FormatType.common.lengthmsg.match';
    } else if (minLength > 0 && maxLength > 0) {
      return 'awag.msg.Format.FormatType.common.lengthmsg.minmax';
    } else if (minLength > 0 && maxLength === 0) {
      return 'awag.msg.Format.FormatType.common.lengthmsg.min';
    } else if (minLength === 0 && maxLength > 0) {
      return 'awag.msg.Format.FormatType.common.lengthmsg.max';
    } else {
      return 'and invalid length.';
    }
  }

  /**
  * @description pipe transform.
  * @param {string} formatType
  * @param {number} minLength
  * @param {number} maxLength
  * @returns
  */
  transform(formatType: string, minLength: number, maxLength: number, isMessage = true) {

    if (formatType === this.lastFormatType
      && minLength === this.lastMinLength
      && maxLength === this.lastMaxLength
      && this.translate.currentLang === this.lastLang
      && isMessage === this.lastIsMessage) {
      return this.lastTranslatedValue;
    }

    let translatedValue: string | null = null;

    if (formatType.startsWith('StringFormat')) {
      this.translate.get('awag.msg.' + formatType).pipe(
        take(1),
        map((res: string) => res + this.translate.instant(this.getLengthTranslationKey(minLength, maxLength), { min: minLength, max: maxLength, length: minLength }))
      ).pipe(map((res: string) => {
        if (isMessage) {
          return this.translate.instant('awag.msg.Validation.error', { validationFormat: res });
        } else {
          return res;
        }
      }))
        .subscribe((res: string) => {
          translatedValue = res;
          this.lastFormatType = formatType;
          this.lastMinLength = minLength;
          this.lastMaxLength = maxLength;
          this.lastLang = this.translate.currentLang;
          this.lastTranslatedValue = translatedValue;
          this.lastIsMessage = isMessage;
        });
    } else if (formatType.startsWith('Number')) {
      this.translate.get('awag.msg.' + formatType, { fraction: minLength, integer: maxLength })
        .pipe(
          take(1),
          map((res: string) => {
            if (isMessage) {
              return this.translate.instant('awag.msg.Validation.error', { validationFormat: res });
            } else {
              return res;
            }
          })
        )
        .subscribe((res: string) => {
          translatedValue = res;
          this.lastFormatType = formatType;
          this.lastMinLength = minLength;
          this.lastMaxLength = maxLength;
          this.lastLang = this.translate.currentLang;
          this.lastTranslatedValue = translatedValue;
          this.lastIsMessage = isMessage;
        });
    } else if (formatType.startsWith('DateTime')) {
      this.translate.get('awag.msg.' + formatType)
        .pipe(
          take(1),
          map((res: string) => {
            if (isMessage) {
              return this.translate.instant('awag.msg.Validation.error', { validationFormat: res });
            } else {
              return res;
            }
          })
        )
        .subscribe((res: string) => {
          translatedValue = res;
          this.lastFormatType = formatType;
          this.lastMinLength = minLength;
          this.lastMaxLength = maxLength;
          this.lastLang = this.translate.currentLang;
          this.lastTranslatedValue = translatedValue;
          this.lastIsMessage = isMessage;
        });
    } else {
      this.translate.get('awag.msg.' + formatType)
        .pipe(take(1))
        .subscribe((res: string) => {
          translatedValue = res;
          this.lastFormatType = formatType;
          this.lastMinLength = minLength;
          this.lastMaxLength = maxLength;
          this.lastLang = this.translate.currentLang;
          this.lastTranslatedValue = translatedValue;
          this.lastIsMessage = isMessage;
        });
    }
    return translatedValue;
  }
}
