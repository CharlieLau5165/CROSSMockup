/* Generated by AWAG */
import { OnInit, AfterViewInit, OnDestroy, TemplateRef, Renderer2, Directive, inject } from '@angular/core';
import { Meta } from '@angular/platform-browser';
import { Router, NavigationEnd } from '@angular/router';
import { NgbModal, NgbOffcanvas, NgbOffcanvasRef } from '@ng-bootstrap/ng-bootstrap';
import { Subscription } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';

import { AwagCommonService } from './awag/awag-common.service';
import { AwagContextService } from './awag/awag-context.service';
import { AwagFilelistService } from './awag/awag-file-list.service';
import { AwagLanguageSupportService } from './awag/language-support/awag-language-support.service';
import { AwagLoggerService } from './awag/logger/awag-logger.service';
import { AWAG_COMMON_MESSAGES } from './awag/awag-common-messages';
import { ConfigItem } from './awag/awag-config.service';

/**
 * @description
 * AppComponent
 * @implements {OnInit}
 */
@Directive({})
export class AppBase implements OnInit, AfterViewInit, OnDestroy {

  /**
   * コンポーネント内に保持する全てのSubscription
   */
  protected subscription: Subscription = new Subscription();

  /**
   * ユースケース単位の認証状態
   */
  isUsecaseAuthorized: { [key: string]: boolean } = {
    '/home': true,
    '/contacthistory': true,
  };

  /**
   * Unlisteners
   */
  protected unlisteners: (() => void)[] = [];

  /**
   * Renderer2
   */
  protected renderer = inject(Renderer2);

  constructor(
    protected router: Router,
    protected awagCommon: AwagCommonService,
    protected awagContext: AwagContextService,
    protected awagLogger: AwagLoggerService,
    protected awagFilelist: AwagFilelistService,
    protected awagLanguageSupport: AwagLanguageSupportService,
    protected translate: TranslateService,
  ) {

    // Translation
    const language = this.awagLanguageSupport.getCurrentLanguage();
    this.subscription.add(this.translate.onLangChange.subscribe(() => this.awagOnLangChange()));
    this.awagLanguageSupport.setLanguage(language);

    // META要素の更新
    const meta = inject(Meta);
    this.subscription.add(this.translate.onLangChange.subscribe(() => {
      this.translate.get('awag.prj.name').subscribe(translated => {
        meta.updateTag({ name: 'apple-mobile-web-app-title', content: translated });
        meta.updateTag({ name: 'application-name', content: translated });
      });
    }));

    this.subscription.add(this.router.events.subscribe(event => {
      if (event instanceof NavigationEnd) {
        // メニュー選択後の遷移が確定した時の処理
        if (this.awagContext.isMenuLinkProcessing()) {
          this.start();
          this.awagContext.setMenuLinkProcessing(false);
        }
        // Breadcrumbs
        setTimeout(() => {
          if (!this.awagContext.isNavigateError()) {
            this.awagCommon.getBreadcrumb().update(event);
          }
        });
        this.awagCommon.scrollToTop(awagContext.getModalContext());
      }
    }));
    // コンパクト表示
    this.awagCommon.changeCompactView(this.awagCommon.getConfig().get(ConfigItem.COMPACT));
  }

  /**
   * @description
   * AngularのngAfterViewInitライフサイクルメソッド。ビューの初期化後に実行されます。
   */
  ngAfterViewInit(): void {
    if (navigator.webdriver) {
      document.querySelector('.awag-footer')?.classList.add('awag-hidden');
    }
  }

  /**
   * @description
   * LangChangeイベント発行時に処理されます。
   */
  protected awagOnLangChange(): void {
    this.subscription.add(this.translate.get('awag.prj.name').subscribe((res: string) => window.document.title = res));
    this.awagLanguageSupport.getHashTranslated(AWAG_COMMON_MESSAGES, AWAG_COMMON_MESSAGES);
    this.awagCommon.getBreadcrumb().refresh();
  }

  /**
   * @description
   * ユースケース開始のリンクがクリックされた時の処理。
   */
  menuLinkSelected(): void {
    this.awagContext.setMenuLinkProcessing(true);
  }

  /**
   * @description
   * ユースケース開始時の処理を実行します。
   */
  start(): void {
    this.awagContext.clear();
    this.awagCommon.getBreadcrumb().reset(true);
    this.awagFilelist.clear();
    this.awagContext.setNavigateFromRouter(true);
    this.awagContext.setNavigateError(false);
  }

  /**
   * @description
   * AngularのngOnInitライフサイクルメソッド。
   */
  ngOnInit(): void {
    document.getElementById('awagOverlay')!.classList.add('awag-loading-overlay--init');
    document.getElementById('awagOverlay')!.classList.remove('d-none');
    this.changeColorModeSettings(this.awagCommon.getColor());
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    this.unlisteners.push(this.renderer.listen(mediaQuery, 'change', (event: MediaQueryListEvent) => {
      if (this.awagCommon.getColor() == 'auto') {
        this.changeColorMode(event.matches ? 'dark' : 'light');
      }
    }));
  }

  /**
   * @description
   * AngularのngOnDestroyライフサイクルメソッド。
   */
  ngOnDestroy(): void {
    this.subscription.unsubscribe();
    this.unlisteners.forEach(unlistener => unlistener());
    this.unlisteners = [];
  }

  /**
   * @description
   * 言語を変更します。
   * @param {string} language 言語ID
   */
  public changeLanguage(language: string): void {
    this.awagLanguageSupport.setLanguage(language);
  }

  /**
   * NGBootstrap Offcanvas.
   */
  protected offcanvasService = inject(NgbOffcanvas);

  /**
   * NGBootstrap OffcanvasRef.
   */
  protected offcanvasRef: NgbOffcanvasRef | null = null;

  /**
   * @description
   * メニューを開きます。
   * @param {TemplateRef<any>} content メニューコンテント
   */
  openMenu(content: TemplateRef<any>) {
    const menuOption = {
      ariaLabelledBy: 'offcanvasNavbarLabel',
      backdrop: false,
      panelClass: 'awag-menu',
      scroll: true
    };
    if (this.offcanvasRef == null) {
      this.offcanvasRef = this.offcanvasService.open(content, menuOption);
      this.offcanvasRef.result.then(
        (result) => null,
        (reason) => this.toggleMenu(false)
      );
      this.toggleMenu(true);
    } else {
      this.offcanvasRef.close();
      this.toggleMenu(false);
    }
  }

  /**
   * @description
   * メニューを開閉します。
   * @param {boolean} open 開閉
   */
  protected toggleMenu(open: boolean): void {
    const action = open ? 'add' : 'remove';
    document.querySelector('.awag-header')?.classList[action]('awag-menu--opened');
    document.querySelector('.awag-main')?.classList[action]('awag-menu--opened');
    document.querySelector('.awag-footer')?.classList[action]('awag-menu--opened');
    document.querySelectorAll('form').forEach(form => {
      form.classList[action]('awag-menu--opened');
    });
    if (!open) {
      this.offcanvasRef = null;
    }
  }

  /**
   * @description
   * 色モード設定を変更します。
   * @param {string} colorModeSetting 色モード設定
   */
  changeColorModeSettings(colorModeSetting: string) {
    if (colorModeSetting == 'auto') {
      this.changeColorMode(window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    } else {
      this.changeColorMode(colorModeSetting);
    }
    this.awagCommon.setColor(colorModeSetting);
  }

  /**
   * @description
   * 色モードを変更します。
   * @param {string} colorMode 色モード
   */
  changeColorMode(colorMode: string) {
    document.documentElement.setAttribute('data-bs-theme', colorMode);
  }

}
