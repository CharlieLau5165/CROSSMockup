/* Generated by AWAG */
import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, Directive } from '@angular/core';
import { NgModel } from '@angular/forms';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';

import { AWAG_COMMON_MESSAGES } from '../../awag/awag-common-messages'; // NOSONAR

import { AwagBaseComponent } from '../../awag/awag-base.component';
import { AwagCommonService } from '../../awag/awag-common.service';
import { AwagContextService } from '../../awag/awag-context.service';
import { AwagLoggerService } from '../../awag/logger/awag-logger.service';
import { AwagAlertService } from '../../awag/alert/service/awag-alert.service';
import { AwagLanguageSupportService } from '../../awag/language-support/awag-language-support.service';
import { AppNameValueService } from '../../app-namevalue.service';
import { MaintenanceSearchAwagSearchCustomService } from './service/maintenance-search-awagsearch-custom.service';
import { AppCommonService } from '../../common/app-common.service';

import { AwagError } from '../../awag/awag-error'; // NOSONAR
import { AwagListController } from '../../awag/awag-listcontroller';
import { AwagSubContext } from '../../awag/awag-subcontext';
import { AwagVisibilityService, AwagVisibilityConfig, AwagVisibilityState } from '../../awag/awag-visibility.service';
import { ROLE_BASED_VISIBILITY } from './maintenance-search-config';

/**
 * @description
 * Screen component
 * メニュー：Maintenance (顧客検索)
 * 画面：Search (顧客検索)
 * @extends {AwagBaseComponent}
 * @implements {OnInit}
 * @implements {AfterViewInit}
 */
@Directive()
export class MaintenanceSearchComponent extends AwagBaseComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {

  /**
   * Providers definition for @Component annotation.
   */
  static readonly providers: any[] = [
    MaintenanceSearchAwagSearchCustomService,
  ];

  /**
   * NgModel管理マップ
   */
  ngModelMap: { [key: string]: NgModel | undefined } = {};

  /**
   * code list for 顧客区分
   */
  customerClassCode: any[] = [];

  /**
   * code list for 生年月日
   */
  yearOptsCode: any[] = [];

  /**
   * code list for 地区
   */
  areaOptsCode: any[] = [];

  /**
   * code list for 選択
   */
  provinceOptsCode: any[] = [];

  /**
   * code list for 選択
   */
  callnameselect1Code: any[] = [];

  /**
   * code list for 検索パターン
   */
  searchPaternsCode: any[] = [];

  /**
   * code list for 地区
   */
  areaCheckCode: any[] = [];

  /**
   * code list for 法人名
   */
  searchOptsCode: any[] = [];

  /**
   * ListController for list (お客様一覧)
   */
  listListCtrl!: AwagListController;

  /**
   * selectedKey for list (お客様一覧)
   */
  listSelected: any = null;

  /**
   * ListController for list1 (契約数情報)
   */
  list1ListCtrl!: AwagListController;

  /**
   * selectedKey for list1 (契約数情報)
   */
  list1Selected: any = null;

  /**
   * ListController for list2 (カード)
   */
  list2ListCtrl!: AwagListController;

  /**
   * selectedKey for list2 (カード)
   */
  list2Selected: any = null;

  /**
   * ListController for list3 (割賦)
   */
  list3ListCtrl!: AwagListController;

  /**
   * selectedKey for list3 (割賦)
   */
  list3Selected: any = null;

  /**
   * ListController for list4 (割賦(ｳｨｽﾞﾘ))
   */
  list4ListCtrl!: AwagListController;

  /**
   * selectedKey for list4 (割賦(ｳｨｽﾞﾘ))
   */
  list4Selected: any = null;

  /**
   * ListController for list5 (証書ロ)
   */
  list5ListCtrl!: AwagListController;

  /**
   * selectedKey for list5 (証書ロ)
   */
  list5Selected: any = null;

  /**
   * ListController for list6 (与信)
   */
  list6ListCtrl!: AwagListController;

  /**
   * selectedKey for list6 (与信)
   */
  list6Selected: any = null;

  /**
   * 活性表示・非活性表示・非表示制御設定
   */
  visibilityConfig: AwagVisibilityConfig;

  /**
   * @constructor
   * @param {Router} router
   * @param {AwagCommonService} awagCommon
   * @param {AwagContextService} awagContext
   * @param {AwagLoggerService} awagLogger
   * @param {AwagAlertService} awagAlert
   * @param {AwagLanguageSupportService} awagLanguageSupport
   * @param {AppNameValueService} appNameValue
   * @param {AppCommonService} appCommon
   * @param {TranslateService} translate
   * @param {AwagVisibilityService} visibilityService
   * @param {MaintenanceSearchAwagSearchCustomService} awagSearchService
   */
  constructor(
    protected override router: Router,
    protected override awagCommon: AwagCommonService,
    protected override awagContext: AwagContextService,
    protected override awagLogger: AwagLoggerService,
    protected override awagAlert: AwagAlertService,
    protected override awagLanguageSupport: AwagLanguageSupportService,
    protected appNameValue: AppNameValueService,
    protected appCommon: AppCommonService,
    protected translate: TranslateService,
    protected visibilityService: AwagVisibilityService,
    protected awagSearchService: MaintenanceSearchAwagSearchCustomService,
  ) {
    super(router, awagCommon, awagContext, awagLogger, awagAlert, awagLanguageSupport);
    this.awagContext.setScreenKey('maintenance_search');
    if (this.awagContext.getModalContext() == null) {
      this.subscription.add(this.translate.get('awag.prj.uc.maintenance.sc.search.name').subscribe((res: string) => window.document.title = res));
    }
    this.appNameValueInit();
    this.subscription.add(this.translate.onLangChange.subscribe(() => this.awagOnLangChange()));
    this.visibilityConfig = this.visibilityService.getVisibilityConfig(ROLE_BASED_VISIBILITY, this.awagContext.getUser().getUserRoles());
  }

  /**
   * @description
   * 対象セクションの項目を非表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityHidden(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Hidden) || super.isVisibilityHidden(sectionName, itemId);
  }

  /**
   * @description
   * 対象セクションの項目を非活性表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非活性表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityInactive(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName]['*'] ?? this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Inactive) || super.isVisibilityInactive(sectionName, itemId);
  }

  /**
   * @description
   * OnInit lifecycle hook.
   */
  ngOnInit() {
    this.awagOnInit();
    this.model = this.getModelOnInit('maintenance_search');
    this.showError(this.getErrorOnInit());
    if (this.model.search === undefined) {
      this.model.search = {
        _inclusiveor: 'false'
      };
    }
    this.listListCtrl ??= new AwagListController(this.model.list, null);
    this.list1ListCtrl ??= new AwagListController(this.model.list1, null);
    this.list2ListCtrl ??= new AwagListController(this.model.list2, null);
    this.list3ListCtrl ??= new AwagListController(this.model.list3, null);
    this.list4ListCtrl ??= new AwagListController(this.model.list4, null);
    this.list5ListCtrl ??= new AwagListController(this.model.list5, null);
    this.list6ListCtrl ??= new AwagListController(this.model.list6, null);
    this.awagContext.setVModel('maintenance_search', this.model);
    this.appOnInit();
  }

  /**
   * @description
   * OnInit ライフサイクル処理
   */
  appOnInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewInit lifecycle hook.
   */
  ngAfterViewInit() {
    this.awagAfterViewInit();
    this.appAfterViewInit();
  }

  /**
   * @description
   * AfterViewInit ライフサイクル処理
   */
  appAfterViewInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewChecked lifecycle hook.
   */
  ngAfterViewChecked() {
    this.awagAfterViewChecked();
    this.appAfterViewChecked();
  }

  /**
   * @description
   * AfterViewChecked ライフサイクル処理
   */
  appAfterViewChecked() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * OnDestroy lifecycle hook.
   */
  ngOnDestroy() {
    this.appOnDestroy();
    this.awagOnDestroy();
  }

  /**
   * @description
   * OnDestroy ライフサイクル処理
   */
  appOnDestroy() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * Code value initialization.
   * @param {?boolean} refresh Whether to refresh and retrieve code values.
   */
  protected appNameValueInit(refresh?: boolean) {
    // Name value
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.customerClass, this.customerClassCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.yearOpts, this.yearOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.areaOpts, this.areaOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.provinceOpts, this.provinceOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.callnameselect1, this.callnameselect1Code);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.searchPaterns, this.searchPaternsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.areaCheck, this.areaCheckCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.searchOpts, this.searchOptsCode);
  }

  /**
   * @description
   * Process on LangChange event.
   */
  protected awagOnLangChange() {
    this.awagAlert.clearAlerts();
    this.subscription.add(this.translate.get('awag.prj.uc.maintenance.sc.search.name').subscribe((res: string) => window.document.title = res));
    this.appNameValueInit(true);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * change page size
   * @param list {AwagListController} pagination target
   * @param pageSize {number} page size
   * @param target {string} element id of the target
   */
  changelen(list: AwagListController, pageSize: number, target: string | null = null) {
    list.changelen(pageSize);
    if (target) {
      (document.getElementById(target) as HTMLElement)?.focus();
    }
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Paginate given list.
   * @param list {AwagListController} pagination target
   * @param page {number} page number
   * @param target {string} element id of the target
   */
  paginate(list: AwagListController, page: number, target: string | null = null) {
    if (typeof page !== 'number') {
      page = parseInt(page, 10);
    }
    list.paginate(page);
    if (target) {
      (document.getElementById(target) as HTMLElement)?.focus();
    }
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Sort given list.
   * @param list {AwagListController} sort target
   * @param name {string} sort key
   */
  sortList(list: AwagListController, name: string) {
    list.sortList(name);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Event handling for awagReset.
   */
  awagReset() {
    (document.querySelectorAll('[name="awagOptionOr"]')[0] as HTMLInputElement).checked = true;
    this.model.search = {
      _inclusiveor: 'false'
    };
    this.awagAfterViewInit();
    setTimeout(() => this.resetChecked());
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  listCheck(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.listListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list1Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list1ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list2Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list2ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list3Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list3ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list4Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list4ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list5Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list5ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list6Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list6ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * Event handling for awagSearch (検索)
   */
  awagSearch() {
    this.showLoading();
    this.awagContext.setVModel('maintenance_search', this.model);
    // SEARCH_TABLE checkbox control
    if (this.model.search.areaCheck != this.areaCheckCode[1].value) {
      this.model.search.areaCheck = null;
    }
    const param = this.awagSearchPreCallLogic(this.model.search);
    if (this.awagContext.isCancelApi()) {
      // cancel
      this.awagContext.setCancelApi(false);
      if (this.awagContext.getNextUrl() != null) {
        this.awagNavigateNextPage(this.model);
      }
      this.hideLoading();
      this.awagAfterViewInit();
    } else {
      // main
      this.subscription.add(this.awagSearchService.execute(param).subscribe({
        next: (res) => this.awagSearchSuccessLogic(res),
        error: (error) => this.awagSearchErrorLogic(error, this.model)
      }));
    }
  }

  /**
   * @description
   * Pre API call logic for awagSearch (検索)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected awagSearchPreCallLogic(model: any) { return model; }

  /**
   * @description
   * API success logic for awagSearch (検索)
   * @param {*} res HTTP response
   */
  awagSearchSuccessLogic(res: any) {
    this.awagLogger.debug('MaintenanceSearchComponent.awagSearchSuccessLogic() ');
    this.awagLogger.debug(res);
    if (res == null) {
      // 204 no content
      this.awagSearchErrorLogic(new AwagError('204', AWAG_COMMON_MESSAGES['SCREEN_COMPONENT_AWAGSEARCH_204']), this.model);
      this.model.list = [];
    } else {
      res = this.awagSearchSuccessCustomLogic(res);
      this.model.list = res.list;
      if (res.awagMessage) {
        this.showMessage(res.awagMessage);
      }
    }
    // AwagListController for sort / paging
    this.listListCtrl.setupPagination(this.model.list, true);
    this.awagContext.setVModel('maintenance_search', this.model);
    this.hideLoading();
    this.awagAfterViewInit();
  }

  /**
   * @description
   * API success custom logic for awagSearch (検索)
   * @param {*} res HTTP response
   * @returns Edited HTTP response
   */
  protected awagSearchSuccessCustomLogic(res: any) { return res; }

  /**
   * @description
   * API error logic for  awagSearch (検索)
   * @param {*} error HTTP error response
   * @param {*} model Model data of screen
   */
  awagSearchErrorLogic(error: any, model: any) {
    this.awagLogger.debug('MaintenanceSearchComponent.awagSearchErrorLogic() ');
    this.awagLogger.warn(error);
    this.model = this.awagSearchErrorCustomLogic(error, this.model);
    this.showError(error);
    this.hideLoading();
    this.awagAfterViewInit();
  }

  /**
   * @description
   * API error custom logic for awagSearch (検索)
   * @param {*} error HTTP error response
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected awagSearchErrorCustomLogic(error: any, model: any) { return model; }

  /**
   * @description
   * Event handling for awagSelect (選択)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  awagSelect(index: number, item: any) {
    this.awagContext.setVModel('maintenance_search', this.model);
    this.awagContext.setNextModel(this.awagSelectCustomLogic(this.model, index, item));
    this.listListCtrl.modelSelected = true;
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for awagSelect (選択)
   * @param {*} model Model data of screen
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   * @returns Edited model data of selected item
   */
  protected awagSelectCustomLogic(model: any, index: number, item: any) { return item; }

  /**
   * @description
   * Event handling for clear (クリア)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  clear() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.clearCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for clear (クリア)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected clearCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for customerclassOnChange (顧客区分 onChange)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  customerclassOnChange() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.customerclassOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for customerclassOnChange (顧客区分 onChange)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected customerclassOnChangeCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for importButton (取込)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  importButton() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.importButtonCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for importButton (取込)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected importButtonCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for landsearch (陸事検索)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  landsearch() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // screen transition to land(陸事選択)
    this.awagContext.setNextUrl('/maintenance/land');
    const nextModel = this.landsearchCustomLogic(this.model);
    const subContext = new AwagSubContext();
    subContext.setReturnToPath(this.router.url);
    subContext.setBaseModelKey('maintenance_search');
    subContext.setAllowedMergeProperties([
      'search.landlabel:name',
      'search.landcode:code',
    ]);
    subContext.setNextModel(nextModel);
    if (this.awagContext.getNextUrl()) {
      this.awagContext.setSubContext(subContext);
    }
    this.awagNavigateNextPage();
  }

  /**
   * @description
   * Custom logic for landsearch (陸事検索)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected landsearchCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for sVClink (SVC連携)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  sVClink() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.sVClinkCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for sVClink (SVC連携)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected sVClinkCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for update (最新情報に更新)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  update() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.updateCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for update (最新情報に更新)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected updateCustomLogic(model: any) { return model; }
}
