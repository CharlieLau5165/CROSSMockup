/* Generated by AWAG */
import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, Directive } from '@angular/core';
import { NgModel } from '@angular/forms';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';

import { AWAG_COMMON_MESSAGES } from '../../awag/awag-common-messages'; // NOSONAR

import { AwagBaseComponent } from '../../awag/awag-base.component';
import { AwagCommonService } from '../../awag/awag-common.service';
import { AwagContextService } from '../../awag/awag-context.service';
import { AwagLoggerService } from '../../awag/logger/awag-logger.service';
import { AwagAlertService } from '../../awag/alert/service/awag-alert.service';
import { AwagLanguageSupportService } from '../../awag/language-support/awag-language-support.service';
import { AppNameValueService } from '../../app-namevalue.service';
import { AppCommonService } from '../../common/app-common.service';

import { AwagListController } from '../../awag/awag-listcontroller';
import { AwagVisibilityService, AwagVisibilityConfig, AwagVisibilityState } from '../../awag/awag-visibility.service';
import { ROLE_BASED_VISIBILITY } from './creditcode-creditcode-config';
import { CreditCodes } from '../../creditCode.service';

/**
 * @description
 * Screen component
 * メニュー：Creditcode (信用コード（個人）_カード)
 * 画面：Creditcode (信用コード（個人）_カード)
 * @extends {AwagBaseComponent}
 * @implements {OnInit}
 * @implements {AfterViewInit}
 */
@Directive()
export class CreditcodeCreditcodeComponent extends AwagBaseComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {

  /**
   * Providers definition for @Component annotation.
   */
  static readonly providers: any[] = [
  ];

  /**
   * NgModel管理マップ
   */
  ngModelMap: { [key: string]: NgModel | undefined } = {};

  /**
   * ListController for list (契約一覧)
   */
  listListCtrl!: AwagListController;

  /**
   * selectedKey for list (契約一覧)
   */
  listSelected: any = null;

  /**
   * 活性表示・非活性表示・非表示制御設定
   */
  visibilityConfig: AwagVisibilityConfig;

  /**
   * @constructor
   * @param {Router} router
   * @param {AwagCommonService} awagCommon
   * @param {AwagContextService} awagContext
   * @param {AwagLoggerService} awagLogger
   * @param {AwagAlertService} awagAlert
   * @param {AwagLanguageSupportService} awagLanguageSupport
   * @param {AppNameValueService} appNameValue
   * @param {AppCommonService} appCommon
   * @param {TranslateService} translate
   * @param {AwagVisibilityService} visibilityService
   */
  constructor(
    protected override router: Router,
    protected override awagCommon: AwagCommonService,
    protected override awagContext: AwagContextService,
    protected override awagLogger: AwagLoggerService,
    protected override awagAlert: AwagAlertService,
    protected override awagLanguageSupport: AwagLanguageSupportService,
    protected appNameValue: AppNameValueService,
    protected appCommon: AppCommonService,
    protected translate: TranslateService,
    protected visibilityService: AwagVisibilityService,
    protected creditCodes : CreditCodes
  ) {
    super(router, awagCommon, awagContext, awagLogger, awagAlert, awagLanguageSupport);
    this.awagContext.setScreenKey('creditcode_creditcode');
    if (this.awagContext.getModalContext() == null) {
      this.subscription.add(this.translate.get('awag.prj.uc.creditcode.sc.creditcode.name').subscribe((res: string) => window.document.title = res));
    }
    this.appNameValueInit();
    this.subscription.add(this.translate.onLangChange.subscribe(() => this.awagOnLangChange()));
    this.visibilityConfig = this.visibilityService.getVisibilityConfig(ROLE_BASED_VISIBILITY, this.awagContext.getUser().getUserRoles());
  }

  /**
   * @description
   * 対象セクションの項目を非表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityHidden(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Hidden) || super.isVisibilityHidden(sectionName, itemId);
  }

  /**
   * @description
   * 対象セクションの項目を非活性表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非活性表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityInactive(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName]['*'] ?? this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Inactive) || super.isVisibilityInactive(sectionName, itemId);
  }

  /**
   * @description
   * OnInit lifecycle hook.
   */
  ngOnInit() {
    this.awagOnInit();
    this.model = this.getModelOnInit('creditcode_creditcode');
    this.showError(this.getErrorOnInit());
    this.creditCodes.getCreditCodes().subscribe((data) => {
      this.model.list = data;
      this.awagContext.setVModel('creditcode_creditcode', this.model);
      console.log(this.model);
      if (!data || data.length === 0 ) {
        this.showMessage("該当データなし。検索条件を確認してください。");
      }
      this.appOnInit();
      // this.hideLoading();
      // this.awagAfterViewInit();
      if (this.listListCtrl == null) {
        this.listListCtrl = new AwagListController(this.model.list, null);
        this.listListCtrl.changelen(9);
        this.listListCtrl.pager.lenList = [9, 18, 27, 36, 45];
      }
      // this.awagContext.setVModel('creditcode_creditcode', this.model);
      this.appOnInit();
    });  
    // if (this.listListCtrl == null) {
    //   this.listListCtrl = new AwagListController(this.model.list, null);
    //   this.listListCtrl.changelen(9);
    //   this.listListCtrl.pager.lenList = [9, 18, 27, 36, 45];
    // }
    // this.awagContext.setVModel('creditcode_creditcode', this.model);
    // this.appOnInit();
  }

  /**
   * @description
   * OnInit ライフサイクル処理
   */
  appOnInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewInit lifecycle hook.
   */
  ngAfterViewInit() {
    this.awagAfterViewInit();
    this.appAfterViewInit();
  }

  /**
   * @description
   * AfterViewInit ライフサイクル処理
   */
  appAfterViewInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewChecked lifecycle hook.
   */
  ngAfterViewChecked() {
    this.awagAfterViewChecked();
    this.appAfterViewChecked();
  }

  /**
   * @description
   * AfterViewChecked ライフサイクル処理
   */
  appAfterViewChecked() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * OnDestroy lifecycle hook.
   */
  ngOnDestroy() {
    this.appOnDestroy();
    this.awagOnDestroy();
  }

  /**
   * @description
   * OnDestroy ライフサイクル処理
   */
  appOnDestroy() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * Code value initialization.
   * @param {?boolean} refresh Whether to refresh and retrieve code values.
   */
  protected appNameValueInit(refresh?: boolean) {
    // Name value
  }

  /**
   * @description
   * Process on LangChange event.
   */
  protected awagOnLangChange() {
    this.awagAlert.clearAlerts();
    this.subscription.add(this.translate.get('awag.prj.uc.creditcode.sc.creditcode.name').subscribe((res: string) => window.document.title = res));
    this.appNameValueInit(true);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * change page size
   * @param list {AwagListController} pagination target
   * @param pageSize {number} page size
   * @param target {string} element id of the target
   */
  changelen(list: AwagListController, pageSize: number, target: string | null = null) {
    list.changelen(pageSize);
    if (target) {
      (document.getElementById(target) as HTMLElement)?.focus();
    }
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Paginate given list.
   * @param list {AwagListController} pagination target
   * @param page {number} page number
   * @param target {string} element id of the target
   */
  paginate(list: AwagListController, page: number, target: string | null = null) {
    if (typeof page !== 'number') {
      page = parseInt(page, 10);
    }
    list.paginate(page);
    if (target) {
      (document.getElementById(target) as HTMLElement)?.focus();
    }
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Sort given list.
   * @param list {AwagListController} sort target
   * @param name {string} sort key
   */
  sortList(list: AwagListController, name: string) {
    list.sortList(name);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  listCheck(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.listListCtrl.updateCheckAll(name, checkValue);
  }
}
