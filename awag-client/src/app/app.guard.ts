/* Generated by AWAG */
import { inject, Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanDeactivate, CanDeactivateFn, NavigationStart, Router, RouterStateSnapshot } from '@angular/router';
import { filter, Observable } from 'rxjs';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { App } from './app';
import { AwagConfirmModalComponent } from './awag/modal/awag-confirm-modal.component';
import { AwagContextService } from './awag/awag-context.service';

export const AppGuard: CanDeactivateFn<App> = (component: App, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean => {
  return inject(AppGuardService).canDeactivate(component, currentRoute, currentState, nextState);
}

@Injectable({
  providedIn: 'root'
})
export class AppGuardService implements CanDeactivate<App> {

  /**
   * NavigationStartで検知した次のUrl
   */
  private nextUrl: string | null = null;

  /**
   * Guardを除外する次のURL
   */
  private readonly excludedNextUrls = ['/login', '/home'];

  /**
   * Guardを除外する現在のURL
   */
  private readonly excludedCurrentUrls = ['/home'];

  /**
   * @description
   * Guardするかどうかの判定処理
   * @param currentUrl 現在のURL
   * @param nextUrl 次のURL
   * @returns 判定結果
   */
  private isExcludedGuard = (currentUrl: string, nextUrl: string): boolean => {
    return this.excludedNextUrls.includes(nextUrl)
        || this.excludedCurrentUrls.includes(currentUrl)
        || (this.nextUrl?.match(/\//g) ?? []).length > 1;
  };

  constructor(
    private readonly router: Router,
    private readonly awagContext: AwagContextService,
  ) {
    this.router.events
      .pipe(filter(event => event instanceof NavigationStart))
      .subscribe((event: any) => {
        this.nextUrl = event.url;
      });
  }

  /**
   * @description
   * Guard除外を判定する処理を取得します。
   * @returns Guard除外を判定する処理
   */
  getExcludedGuard(): (currentUrl: string, nextUrl: string) => boolean {
    return this.isExcludedGuard;
  }

  /**
   * @description
   * Guard除外を判定する処理を設定します。
   * @param fn Guard除外を判定する処理
   */
  setExcludedGuard(fn: (currentUrl: string, nextUrl: string) => boolean): void {
    this.isExcludedGuard = fn;
  }

  /**
   * @description
   * Guardを除外する次のURLリストを返します。
   * @returns Guardを除外する次のURLリスト
   */
  getExcludedNextUrls(): string[] {
    return this.excludedNextUrls;
  }

  /**
   * @description
   * Guardを除外する現在のURLリストを返します。
   * @returns Guardを除外する現在のURLリスト
   */
  getExcludedCurrentUrls(): string[] {
    return this.excludedCurrentUrls;
  }

  canDeactivate(
    component: App,
    currentRoute: ActivatedRouteSnapshot,
    currentState: RouterStateSnapshot,
    nextState: RouterStateSnapshot
  ): Observable<boolean> | Promise<boolean> | boolean {
    
    // 特定条件の遷移では確認ダイアログを表示しない
    if (!this.nextUrl || this.isExcludedGuard('/' + currentRoute.routeConfig?.path, this.nextUrl)) {
      return true;
    }
    
    // メニュー選択時に意図しない誤操作を抑止するために確認ダイアログを表示します
    const modalRef = inject(NgbModal).open(AwagConfirmModalComponent, { centered: true, animation: false });
    modalRef.componentInstance.model = {
      body: 'awag.label.sc.confirmmodal.navigation',
      showDismissButton: true,
      dismissButtonLabel: 'awag.label.sc.confirmmodal.dismissbutton',
      showCloseButton: true,
      closeButtonLabel: 'awag.label.sc.confirmmodal.closebutton'
    };
    return modalRef.result.then(
      result => true,
      () => {
        this.awagContext.setMenuLinkProcessing(false);
        return false;
      });
  }

}