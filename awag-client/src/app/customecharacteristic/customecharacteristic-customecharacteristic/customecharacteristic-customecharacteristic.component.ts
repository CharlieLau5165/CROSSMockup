/* Generated by AWAG */
import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, Directive } from '@angular/core';
import { NgModel } from '@angular/forms';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';

import { AWAG_COMMON_MESSAGES } from '../../awag/awag-common-messages'; // NOSONAR

import { AwagBaseComponent } from '../../awag/awag-base.component';
import { AwagCommonService } from '../../awag/awag-common.service';
import { AwagContextService } from '../../awag/awag-context.service';
import { AwagLoggerService } from '../../awag/logger/awag-logger.service';
import { AwagAlertService } from '../../awag/alert/service/awag-alert.service';
import { AwagLanguageSupportService } from '../../awag/language-support/awag-language-support.service';
import { AppNameValueService } from '../../app-namevalue.service';
import { AppCommonService } from '../../common/app-common.service';

import { AwagConfirmModalComponent } from '../../awag/modal/awag-confirm-modal.component';
import { AwagVisibilityService, AwagVisibilityConfig, AwagVisibilityState } from '../../awag/awag-visibility.service';
import { ROLE_BASED_VISIBILITY } from './customecharacteristic-customecharacteristic-config';
import {CustomerCharacters} from '../../customerCharacters.service'

/**
 * @description
 * Screen component
 * メニュー：Customecharacteristic (顧客特性登録)
 * 画面：Customecharacteristic (顧客特性登録)
 * @extends {AwagBaseComponent}
 * @implements {OnInit}
 * @implements {AfterViewInit}
 */
@Directive()
export class CustomecharacteristicCustomecharacteristicComponent extends AwagBaseComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {

  /**
   * Providers definition for @Component annotation.
   */
  static readonly providers: any[] = [
  ];

  /**
   * NgModel管理マップ
   */
  ngModelMap: { [key: string]: NgModel | undefined } = {};

  /**
   * code list for 聴覚_値
   */
  HearingOptsCode: any[] = [];

  /**
   * code list for 特別対応_値
   */
  SpecialResOptsCode: any[] = [];

  /**
   * code list for 勧誘電話_値
   */
  CallCancelOptsCode: any[] = [];

  /**
   * code list for ダイレクトメール_値
   */
  MailCancelOptsCode: any[] = [];

  /**
   * code list for WEB誘導不可_値
   */
  WebGuideOptsCode: any[] = [];

  /**
   * code list for メール対応希望_値
   */
  ResMailOptsCode: any[] = [];

  /**
   * 活性表示・非活性表示・非表示制御設定
   */
  visibilityConfig: AwagVisibilityConfig;

  /**
   * @constructor
   * @param {Router} router
   * @param {AwagCommonService} awagCommon
   * @param {AwagContextService} awagContext
   * @param {AwagLoggerService} awagLogger
   * @param {AwagAlertService} awagAlert
   * @param {AwagLanguageSupportService} awagLanguageSupport
   * @param {AppNameValueService} appNameValue
   * @param {AppCommonService} appCommon
   * @param {TranslateService} translate
   * @param {AwagVisibilityService} visibilityService
   */
  constructor(
    protected override router: Router,
    protected override awagCommon: AwagCommonService,
    protected override awagContext: AwagContextService,
    protected override awagLogger: AwagLoggerService,
    protected override awagAlert: AwagAlertService,
    protected override awagLanguageSupport: AwagLanguageSupportService,
    protected appNameValue: AppNameValueService,
    protected appCommon: AppCommonService,
    protected translate: TranslateService,
    protected visibilityService: AwagVisibilityService,
    protected customerCharacters: CustomerCharacters
  ) {
    super(router, awagCommon, awagContext, awagLogger, awagAlert, awagLanguageSupport);
    this.awagContext.setScreenKey('customecharacteristic_customecharacteristic');
    if (this.awagContext.getModalContext() == null) {
      this.subscription.add(this.translate.get('awag.prj.uc.customecharacteristic.sc.customecharacteristic.name').subscribe((res: string) => window.document.title = res));
    }
    this.appNameValueInit();
    this.subscription.add(this.translate.onLangChange.subscribe(() => this.awagOnLangChange()));
    this.visibilityConfig = this.visibilityService.getVisibilityConfig(ROLE_BASED_VISIBILITY, this.awagContext.getUser().getUserRoles());
  }

  /**
   * @description
   * 対象セクションの項目を非表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityHidden(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Hidden) || super.isVisibilityHidden(sectionName, itemId);
  }

  /**
   * @description
   * 対象セクションの項目を非活性表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非活性表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityInactive(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName]['*'] ?? this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Inactive) || super.isVisibilityInactive(sectionName, itemId);
  }

  /**
   * @description
   * OnInit lifecycle hook.
   */
  ngOnInit() {
    this.awagOnInit();
    this.model = this.getModelOnInit('customecharacteristic_customecharacteristic');
    this.showError(this.getErrorOnInit());
    this.customerCharacters.getcustomerCharacters().subscribe((data: string | any[]) => {
      this.model = data[0];
      this.awagContext.setVModel('customecharacteristic_customecharacteristic', this.model);
      console.log(this.model);
      if (!data || data.length === 0 ) {
        this.showMessage("該当データなし。検索条件を確認してください。");
      }
      this.appOnInit();
      // this.hideLoading();
      // this.awagAfterViewInit();
    });  
    
  }

  /**
   * @description
   * OnInit ライフサイクル処理
   */
  appOnInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewInit lifecycle hook.
   */
  ngAfterViewInit() {
    this.awagAfterViewInit();
    this.appAfterViewInit();
  }

  /**
   * @description
   * AfterViewInit ライフサイクル処理
   */
  appAfterViewInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewChecked lifecycle hook.
   */
  ngAfterViewChecked() {
    this.awagAfterViewChecked();
    this.appAfterViewChecked();
  }

  /**
   * @description
   * AfterViewChecked ライフサイクル処理
   */
  appAfterViewChecked() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * OnDestroy lifecycle hook.
   */
  ngOnDestroy() {
    this.appOnDestroy();
    this.awagOnDestroy();
  }

  /**
   * @description
   * OnDestroy ライフサイクル処理
   */
  appOnDestroy() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * Code value initialization.
   * @param {?boolean} refresh Whether to refresh and retrieve code values.
   */
  protected appNameValueInit(refresh?: boolean) {
    // Name value
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.HearingOpts, this.HearingOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.SpecialResOpts, this.SpecialResOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.CallCancelOpts, this.CallCancelOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.MailCancelOpts, this.MailCancelOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.WebGuideOpts, this.WebGuideOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.ResMailOpts, this.ResMailOptsCode);
  }

  /**
   * @description
   * Process on LangChange event.
   */
  protected awagOnLangChange() {
    this.awagAlert.clearAlerts();
    this.subscription.add(this.translate.get('awag.prj.uc.customecharacteristic.sc.customecharacteristic.name').subscribe((res: string) => window.document.title = res));
    this.appNameValueInit(true);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Event handling for hearingValueOnChange (聴覚_値 onChange)
   */
  hearingValueOnChange() {
    this.awagContext.setVModel('customecharacteristic_customecharacteristic', this.model);
    // self screen event
    this.model = this.hearingValueOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }
  hearing_updateDate = '';

  /**
   * @description
   * Custom logic for hearingValueOnChange (聴覚_値 onChange)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */

  protected hearingValueOnChangeCustomLogic(model: any) { 
    
    let today = new Date();
    this.hearing_updateDate = today.toDateString();

    return model; 
  }

  /**
   * @description
   * Event handling for mailCancelValueOnChange (ダイレクトメール_値 onChange)
   */
  mailCancelValueOnChange() {
    this.awagContext.setVModel('customecharacteristic_customecharacteristic', this.model);
    // self screen event
    this.model = this.mailCancelValueOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  mailCancel_updateDate = '';
  /**
   * @description
   * Custom logic for mailCancelValueOnChange (ダイレクトメール_値 onChange)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected mailCancelValueOnChangeCustomLogic(model: any) { 
    let today = new Date();
    this.mailCancel_updateDate = today.toDateString();
    return model; 
  }

  /**
   * @description
   * Event handling for noWebGuideValueOnChange (WEB誘導不可_値 onChange)
   */
  noWebGuideValueOnChange() {
    this.awagContext.setVModel('customecharacteristic_customecharacteristic', this.model);
    // self screen event
    this.model = this.noWebGuideValueOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  noWebGuide_updateDate = '';
  /**
   * @description
   * Custom logic for noWebGuideValueOnChange (WEB誘導不可_値 onChange)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected noWebGuideValueOnChangeCustomLogic(model: any) { 
    let today = new Date();
    this.noWebGuide_updateDate = today.toDateString();
    return model; 
  }

  /**
   * @description
   * Event handling for phoneCallCancelValueOnChange (勧誘電話_値 onChange)
   */
  phoneCallCancelValueOnChange() {
    this.awagContext.setVModel('customecharacteristic_customecharacteristic', this.model);
    // self screen event
    this.model = this.phoneCallCancelValueOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  phoneCallCancel_updateDate = '';
  /**
   * @description
   * Custom logic for phoneCallCancelValueOnChange (勧誘電話_値 onChange)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected phoneCallCancelValueOnChangeCustomLogic(model: any) { 
    let today = new Date();
    this.phoneCallCancel_updateDate = today.toDateString();
    return model; 
  }

  registerConfirmModal() {
    const modalRef = this.appCommon.getModal().open(AwagConfirmModalComponent, { centered: true, animation: false });
    modalRef.componentInstance.model = this.registerModalModel;
    modalRef.result
      .then(result => this.register())
      .catch(() => this.awagLogger.debug('CustomecharacteristicCustomecharacteristicComponent.registerConfirmModal(): Confirm modal is dismissed.'));
  }

  /**
   * get model  data for register (登録) confirm dialog
   */
  protected get registerModalModel(): { [key: string]: any } { return {}; }

  /**
   * @description
   * Event handling for register (登録)
   */
  register() {
    this.awagContext.setVModel('customecharacteristic_customecharacteristic', this.model);
    // self screen event
    this.model = this.registerCustomLogic(this.model);
    this.awagAlert.pushAlert('', '処理が成功しました。', 'info');
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for register (登録)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected registerCustomLogic(model: any) { 
    if (this.hearing_updateDate) {
       this.model.hearing_updateDate = this.hearing_updateDate;
    }

    if (this.specialRes_updateDate) {
       this.model.specialRes_updateDate = this.specialRes_updateDate;
    }

    if (this.phoneCallCancel_updateDate) {
       this.model.phoneCallCancel_updateDate = this.phoneCallCancel_updateDate;
    }

    if (this.mailCancel_updateDate) {
       this.model.mailCancel_updateDate = this.mailCancel_updateDate;
    }

    if (this.noWebGuide_updateDate) {
       this.model.noWebGuide_updateDate = this.noWebGuide_updateDate;
    }

    if (this.resMail_updateDate) {
       this.model.resMail_updateDate = this.resMail_updateDate;
    }
   
    return model; 
  }

  /**
   * @description
   * Event handling for resMailValueOnChange (メール対応希望_値 onChange)
   */
  resMailValueOnChange() {
    this.awagContext.setVModel('customecharacteristic_customecharacteristic', this.model);
    // self screen event
    this.model = this.resMailValueOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  resMail_updateDate = '';
  /**
   * @description
   * Custom logic for resMailValueOnChange (メール対応希望_値 onChange)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected resMailValueOnChangeCustomLogic(model: any) { 
    let today = new Date();
    this.resMail_updateDate = today.toDateString();
    return model; 
  }

  specialRes_updateDate = '';
  /**
   * @description
   * Event handling for specialResValueOnChange (特別対応_値 onChange)
   */
  specialResValueOnChange() {
    this.awagContext.setVModel('customecharacteristic_customecharacteristic', this.model);
    // self screen event
    this.model = this.specialResValueOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for specialResValueOnChange (特別対応_値 onChange)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected specialResValueOnChangeCustomLogic(model: any) { 
    let today = new Date();
    this.specialRes_updateDate = today.toDateString();
    return model; 
  }
}
