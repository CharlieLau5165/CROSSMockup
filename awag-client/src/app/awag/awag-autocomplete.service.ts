/* Generated by AWAG */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, Observable } from 'rxjs';
import { map, catchError } from 'rxjs/operators';

import { AwagLoggerService } from './logger/awag-logger.service';
import { AWAG_COMMON_MESSAGES } from './awag-common-messages';

/**
 * @description
 * AwagAutoCompleteService
 * ユーザの入力値に応じて候補値を検索するサービスを提供します。
 */
@Injectable({
  providedIn: 'root'
})
export class AwagAutoCompleteService {

  constructor(
    private readonly http: HttpClient,
    private readonly awagLogger: AwagLoggerService) {
  }

  /**
   * 候補値のキャッシュ
   */
  private dataListCache: { id: string, list: { r: string }[] }[] = [];

  /**
   * キャッシュリストの最大値
   */
  private readonly maxLengthOfCache = 20;

  /**
   * @description
   * 指定したデータリストから候補値を検索します。
   * @param {{ r: string }[]} datalist 候補値を検索する対象となるデータリスト
   * @param {string} term 検索値
   * @returns {string[]} 検索された候補値の一覧
   */
  listSearch(dataList: { rs: { r: string }[] }, term: string): { r: string }[] {
    if (dataList && dataList.rs.length > 0) {
      return dataList.rs.filter(value => value.r.toLowerCase().indexOf(term.toLowerCase()) > -1);
    } else {
      return [];
    }
  }

  /**
   * @description
   * 指定したAPIをコールして候補値を検索します。
   * @param {string} url 検索APIのURL
   * @param {string} key 検索APIの検索値のパラメータ名
   * @param {string} term 検索値
   * @returns {Observable<{ r: string }[]>} 検索された候補値の一覧
   */
  apiSearch(url: string, key: string, term: string): Observable<{ r: string }[]> {

    if (!term) {
      return of([]);
    }

    const cacheId = url + '$' + term;

    const cachedDataList = this.dataListCache.filter((dataListObj) => {
      return (dataListObj.id === cacheId);
    });

    if (cachedDataList && cachedDataList.length > 0) {
      return of(cachedDataList[0].list);
    }

    const param: { [index: string]: any } = {};
    param[key] = term;
    return this.http
      .get<any>(url, { params: param })
      .pipe(
        map(response => {
          let values: { r: string }[];
          if (response.rs?.length > 0) {
            values = response.rs;
          } else {
            values = [];
          }
          if (this.dataListCache.length >= this.maxLengthOfCache) {
            this.dataListCache.shift();
          }
          this.dataListCache = this.dataListCache.filter((dataListObj) => {
            return (dataListObj.id !== cacheId);
          });
          this.dataListCache.push({ id: cacheId, list: values });
          return values;
        }),
        catchError(errorRes => {
          let message = AWAG_COMMON_MESSAGES['BASE_COMPONENT_API_RES_' + errorRes.status];
          if (!message) {
            message = AWAG_COMMON_MESSAGES['BASE_COMPONENT_API_RES_DEFAULT'];
          }
          this.awagLogger.warn(`AwagAutoCompleteService.search():failed to call api. message[${message}] status[${errorRes.status}]`);
          if (errorRes.status >= 500) {
            return of([{ r: '', s: AWAG_COMMON_MESSAGES['AUTOCOMPLETE_API_RES_ERROR_DEFAULT'] }]);
          } else {
            return of([]);
          }
        }));
  }
}
