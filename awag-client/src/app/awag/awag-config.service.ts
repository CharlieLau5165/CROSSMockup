/* Generated by AWAG */
import { Injectable } from '@angular/core';

import { AwagLoggerService } from './logger/awag-logger.service';

/**
 * @description
 * 永続化対象の設定項目
 * @enum {number}
 */
export enum ConfigItem {
  COMPACT = 'COMPACT',
  COLOR = 'COLOR',
  LANGUAGE = 'LANGUAGE',
  JWT = 'JWT'
}

/**
 * @description
 * 永続化に使用するストレージのタイプ
 * @enum {number}
 */
enum Type {
  SESSION = 'SESSION',
  LOCAL = 'LOCAL',
  NONE = 'NONE'
}

/**
 * @description
 * ストレージ設定を表すモデルオブジェクト
 */
class AwagStorageSetting {

  constructor(type: Type, key: string) {
    this._type = type;
    this._key = key;
  }

  private _type: Type;
  private _key: string;

  get type(): Type {
    return this._type;
  }

  set type(type: Type) {
    this._type = type;
  }

  get key(): string {
    return this._key;
  }

  set key(key: string) {
    this._key = key;
  }
}

/**
 * @description
 * AWAG設定項目の定義
 */
const PERSISTENT_SETTINGS: { [itemname: string]: AwagStorageSetting } = {
  COMPACT: new AwagStorageSetting(Type.LOCAL, 'awag-compact'),
  COLOR: new AwagStorageSetting(Type.LOCAL, 'awag-color'),
  LANGUAGE: new AwagStorageSetting(Type.LOCAL, 'awag-language'),
  JWT: new AwagStorageSetting(Type.LOCAL, 'awag-jwt')
};

/**
 * @description
 * AWAG設定項目を管理するサービスです。
 * 設定項目はPERSISTENT_SETTINGSで定義されたストレージに保存されます。
 */
@Injectable({
  providedIn: 'root'
})
export class AwagConfigService {

  private configCache: { [key: string]: string; } = {};

  constructor(
    protected awagLogger: AwagLoggerService
  ) {
    this.refreshCache();
  }

  /**
   * @description
   * 設定項目のキャッシュをリフレッシュします。
   */
  public refreshCache() {
    this.configCache = {};
    for (const key of Object.keys(PERSISTENT_SETTINGS)) {
      this.configCache[key] = this.getFromStorage(ConfigItem[key as keyof typeof ConfigItem]);
    }
    this.awagLogger.develop('AwagConfigService.refreshCache(): refreshed config items.');
  }

  /**
   * @description
   * 設定項目を設定します。
   * @param {ConfigItem} configItem 設定項目
   * @param {*} value 設定値
   */
  public set(configItem: ConfigItem, value: any) {
    if (configItem != null) {
      const storeSetting = PERSISTENT_SETTINGS[configItem];
      if (storeSetting != null) {
        if (storeSetting.type === Type.LOCAL) {
          try {
            localStorage.setItem(storeSetting.key, JSON.stringify(value));
            this.awagLogger.debug(`AwagConfigService.store(): stored config item to storage. [item]${configItem} [storage type]${storeSetting.type}`);
          } catch (e) {
            this.awagLogger.warn(`AwagConfigService.store(): failed to access storage. [item]${configItem} [storage type]${storeSetting.type}`, e);
          }
        } else if (storeSetting.type === Type.SESSION) {
          try {
            sessionStorage.setItem(storeSetting.key, JSON.stringify(value));
            this.awagLogger.debug(`AwagConfigService.store(): stored config item to storage. [item]${configItem} [storage type]${storeSetting.type}`);
          } catch (e) {
            this.awagLogger.warn(`AwagConfigService.store(): failed to access storage. [item]${configItem} [storage type]${storeSetting.type}`, e);
          }
        }
      } else {
        throw new Error(`AwagConfigService.store(): store setting not found. [item]${configItem}`);
      }
      this.configCache[configItem] = value;
      this.awagLogger.debug(`AwagConfigService.store(): stored config item to cache. [item]${configItem}`);
    }
  }

  /**
   * @description
   * 設定項目を取得します。
   * @param {ConfigItem} configItem 取得する設定項目
   * @returns
   */
  public get(configItem: ConfigItem) {
    // 認証情報はキャッシュを参照しない
    if (configItem == ConfigItem.JWT) {
      return this.getFromStorage(configItem);
    }
    let value = null;
    if (configItem != null) {
      const storeSetting = PERSISTENT_SETTINGS[configItem];
      if (storeSetting != null) {
        this.awagLogger.develop(`AwagConfigService.get(): get config item from cache. [item]${configItem}`);
        value = this.configCache[configItem];
      } else {
        throw new Error(`AwagConfigService.get(): store setting not found. [item]${configItem}`);
      }
    }
    return value;
  }

  /**
   * @description
   * 設定項目をwebストレージから取得します。
   * @param {ConfigItem} configItem 取得する設定項目
   * @returns
   */
  public getFromStorage(configItem: ConfigItem) {

    let value = null;
    if (configItem != null) {
      const storeSetting = PERSISTENT_SETTINGS[configItem];
      if (storeSetting != null) {
        if (storeSetting.type === Type.LOCAL) {
          try {
            value = JSON.parse(<string>localStorage.getItem(storeSetting.key));
            this.awagLogger.develop(`AwagConfigService.get(): get config item from storage. [item]${configItem} [storage type]${storeSetting.type}`);
          } catch (e) {
            this.awagLogger.warn(`AwagConfigService.get(): failed to access storage. [item]${configItem} [storage type]${storeSetting.type}`, e);
          }
        } else if (storeSetting.type === Type.SESSION) {
          try {
            value = JSON.parse(<string>sessionStorage.getItem(storeSetting.key));
            this.awagLogger.develop(`AwagConfigService.get(): get config item from storage. [item]${configItem} [storage type]${storeSetting.type}`);
          } catch (e) {
            this.awagLogger.warn(`AwagConfigService.get(): failed to access storage. [item]${configItem} [storage type]${storeSetting.type}`, e);
          }
        }
      } else {
        throw new Error(`AwagConfigService.get(): store setting not found. [item]${configItem}`);
      }
    }
    return value;
  }

  /**
   * @description
   * 設定項目を削除します。
   * @param {ConfigItem} configItem 削除する設定項目
   */
  public remove(configItem: ConfigItem) {
    if (configItem != null) {

      if (this.configCache[configItem]) {
        this.awagLogger.develop(`AwagConfigService.store(): removed config item from cache. [item]${configItem}`);
        delete this.configCache[configItem];
      }

      const storeSetting = PERSISTENT_SETTINGS[configItem];
      if (storeSetting != null) {
        if (storeSetting.type === Type.LOCAL) {
          try {
            localStorage.removeItem(storeSetting.key);
          } catch (e) {
            this.awagLogger.warn(`AwagConfigService.remove(): failed to access storage. [item]${configItem} [storage type]${storeSetting.type}`, e);
          }
        } else if (storeSetting.type === Type.SESSION) {
          try {
            sessionStorage.removeItem(storeSetting.key);
          } catch (e) {
            this.awagLogger.warn(`AwagConfigService.remove(): failed to access storage. [item]${configItem} [storage type]${storeSetting.type}`, e);
          }
        }
      } else {
        throw new Error(`AwagConfigService.get(): store setting not found. [item]${configItem}`);
      }
    }
  }
}
