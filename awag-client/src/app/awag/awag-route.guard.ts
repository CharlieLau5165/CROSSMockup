/* Generated by AWAG */
import { Injectable, inject } from '@angular/core';
import { ActivatedRouteSnapshot, CanDeactivateFn, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

import { AwagBaseComponent } from './awag-base.component';
import { AwagLoggerService } from './logger/awag-logger.service';

export const AwagRouteGuard: CanDeactivateFn<AwagBaseComponent> = (component: AwagBaseComponent, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean => {
  return inject(AwagRouteGuardService).canDeactivate(component, currentRoute, currentState, nextState);
}
/**
 * @description
 * ルートを非アクティブ化できるかどうかを決定するガードの実装です。
 * このガードクラスを含む全てのガードがtrueを返す場合にナビゲーションが続行されます。
 */
@Injectable({
  providedIn: 'root'
})
export class AwagRouteGuardService {
  
  /**
   * @constructor
   * @param {AwagLoggerService} awagLogger AwagLoggerService
   */
  constructor(
    protected awagLogger: AwagLoggerService
  ) { }

  /**
   * @description
   * このクラスのガード判定は、現在の画面コンポーネントのcanDeactivateに委譲されます。
   * @param {AwagBaseComponent} component 現在の画面コンポーネント
   * @param {ActivatedRouteSnapshot} currentRoute 現在の画面遷移情報
   * @param {RouterStateSnapshot} currentState 現在の遷移状態
   * @param {RouterStateSnapshot} nextState 次の遷移状態
   * @returns {boolean} 画面遷移処理を継続する場合にはtrue、中断する場合にはfalse
   */
  canDeactivate(
    component: AwagBaseComponent,
    currentRoute: ActivatedRouteSnapshot,
    currentState: RouterStateSnapshot,
    nextState: RouterStateSnapshot
  ): Observable<boolean> | Promise<boolean> | boolean {
    return component.canDeactivate(nextState.url);
  }
}
