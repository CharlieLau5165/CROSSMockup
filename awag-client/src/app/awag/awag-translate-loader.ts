/* Generated by AWAG */
import { HttpClient } from '@angular/common/http';
import { TranslateLoader, TranslationObject } from '@ngx-translate/core';
import { Observable, forkJoin, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

/**
 * @description
 * Load translation files from server
 */
export class AWAGTranslateLoader implements TranslateLoader {
  /**
   * @constructor
   * @param {HttpClient} http
   * @param {string} prefix
   * @param {string} suffix
   */
  constructor(
    private readonly http: HttpClient,
    private readonly prefix: string = './i18n/',
    private readonly suffix: string = '.json') {
  }

  /**
   * @description
   * Gets the translation files from server
   * @param {string} lang
   */
  public getTranslation(lang: string): Observable<TranslationObject> {
    const urls = [`${this.prefix}${lang}${this.suffix}`, `${this.prefix}app/${lang}${this.suffix}`];

    const requests = urls.map((path: string) => {
      return this.http.get(path).pipe(catchError(err => {
        return of({});
      }));
    });
    return forkJoin(requests).pipe(map(response => this.deepMergeArray(response)));
  }

  /**
   * @description
   * deep merge array elements
   * @param {any[]} array
   */
  private deepMergeArray(array: any[]): any {
    return array.reduce((acc, val) => this.deepMerge(acc, val), {});
  }
  /**
   * @description
   * deep merge elements
   * @param {any} target
   * @param {any} source
   */
  private deepMerge(target: any, source: any): any {
    const output = {...target};
    if (this.isObject(target) && this.isObject(source)) {
      Object.keys(source).forEach((key: any) => {
        if (this.isObject(source[key])) {
          if (!(key in target)) {
            Object.assign(output, { [key]: source[key] });
          } else {
            output[key] = this.deepMerge(target[key], source[key]);
          }
        } else {
          Object.assign(output, { [key]: source[key] });
        }
      });
    }
    return output;
  }
  /**
   * @description
   * is Object
   * @param {any} item
   * @param {any} source
   */
  private isObject(item: any): boolean {
    return (item && typeof item === 'object' && !Array.isArray(item));
  }
}
