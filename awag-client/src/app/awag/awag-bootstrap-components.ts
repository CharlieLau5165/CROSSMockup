/* Generated by AWAG */
import { AfterViewInit, Directive, ElementRef, HostListener, inject, Injectable, Input, NgModule, OnDestroy, OnInit } from '@angular/core';
import { NgbDateAdapter, NgbDateParserFormatter, NgbDatepickerI18n, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import { Subject, Subscription } from 'rxjs';
import { AwagContextService } from './awag-context.service';
import { AwagLanguageSupportService } from './language-support/awag-language-support.service';

/**
 * NgbDatePickerが保持する値をNgbDateStructではなく文字列とするためのアダプター
 */
@Injectable()
export class AwagNgbDateAdapter extends NgbDateAdapter<string> {
  /**
   * NgbDateParserFormatter
   */
  ngbParserFormatter = inject(NgbDateParserFormatter);
  /**
   * 文字列の値をNgbDateStructに変換します
   * @param value 文字列の値
   * @returns NgbDateStruct
   */
  fromModel(value: string | null): NgbDateStruct | null {
    return value? this.ngbParserFormatter.parse(value) : null;
  }
  /**
   * NgbDateStructを文字列に変換します。
   * @param date NgbDateStruct
   * @returns 文字列の値
   */
  toModel(date: NgbDateStruct | null): string | null {
    return this.ngbParserFormatter.format(date);
  }
}
@Injectable({
  providedIn: 'root'
})
class TabControlService {
  // Subject
  changeTabContentSubject = new Subject<void>();
  // タブ切り替え
  changeTabContent() {
    this.changeTabContentSubject.next();
  }
}

/**
 * Tab制御
 */
@Directive({
  selector: '[awagTab]',
})
export class AwagTabDirective implements AfterViewInit, OnDestroy {
  // ex. 0〜
  @Input('awagTab') tabGroupName!: string;
  // コンストラクター
  constructor(
    private readonly el: ElementRef,
    private readonly awagContext: AwagContextService,
    private readonly tabControlService: TabControlService,
  ) {}
  // AfterViewInit
  ngAfterViewInit() {
    const tabContentIndex = this.el.nativeElement.getAttribute('data-tab-content-index');
    if (this.awagContext.getActiveTabIndex(this.awagContext.getScreenKey() + '_' + this.tabGroupName) == Number.parseInt(tabContentIndex)) {
      this.onClick();
    }
  }
  // 破棄
  ngOnDestroy(): void {
    this.el.nativeElement = null;
  }
  // Click
  @HostListener('click') onClick() {
    const tabContentIndex = this.el.nativeElement.getAttribute('data-tab-content-index');
    this.awagContext.setActiveTabIndex(this.awagContext.getScreenKey() + '_' + this.tabGroupName, Number.parseInt(tabContentIndex));
    const parent: Element = this.el.nativeElement.closest('.nav-tabs');
    parent.querySelectorAll('.nav-link').forEach((element: Element) => {
      element.classList.remove('active');
      element.removeAttribute('aria-current');
    });
    this.el.nativeElement.classList.add('active');
    this.el.nativeElement.setAttribute('aria-current', 'page');
    this.tabControlService.changeTabContent();
  }
}

/**
 * Tab制御
 */
@Directive({
  selector: '[awagTabContent]',
})
export class AwagTabContentDirective implements OnInit, AfterViewInit, OnDestroy {
  // ex. 0〜
  @Input('awagTabContent') tabGroupName!: string;
  // Subscription
  private readonly subscription: Subscription = new Subscription();
  // コンストラクター
  constructor(
    private readonly el: ElementRef,
    private readonly awagContext: AwagContextService,
    private readonly tabControlService: TabControlService,
  ) {}
  // OnInit
  ngOnInit() {
    this.subscription.add(this.tabControlService.changeTabContentSubject.subscribe({
      next: () => {
        this.changeTabContent();
      }
    }));
  }
  // AfterViewInit
  ngAfterViewInit() {
    const tabContentIndex = this.el.nativeElement.getAttribute('data-tab-content-index');
    this.el.nativeElement.classList.add('awag-tab-content');
    this.changeTabContent();
    // Top判定
    const prevTabContentIndex = (this.el.nativeElement.previousElementSibling as HTMLElement)?.getAttribute('data-tab-content-index');
    if (prevTabContentIndex == null || prevTabContentIndex != tabContentIndex) {
      this.el.nativeElement.classList.add('awag-tab-content--top');
    }
    // Bottom判定
    const nextTabContentIndex= (this.el.nativeElement.nextElementSibling as HTMLElement)?.getAttribute('data-tab-content-index');
    if (nextTabContentIndex == null || nextTabContentIndex != tabContentIndex) {
      this.el.nativeElement.classList.add('awag-tab-content--bottom');
    }
  }
  // タブ切り替え
  changeTabContent() {
    const tabContentIndex = this.el.nativeElement.getAttribute('data-tab-content-index');
    if (this.awagContext.getActiveTabIndex(this.awagContext.getScreenKey() + '_' + this.tabGroupName) !=  Number.parseInt(tabContentIndex)) {
      this.el.nativeElement.classList.add('awag-tab-content--hidden');
    } else {
      this.el.nativeElement.classList.remove('awag-tab-content--hidden');
    }
  }
  // OnDestroy
  ngOnDestroy() {
    this.subscription.unsubscribe();
    this.el.nativeElement = null;
  }
}
/**
 * MenuGroup
 */
@Directive({
  'selector': '[awagMenuGroup]',
  'exportAs': 'awagMenuGroup'
})
export class AwagMenuGroupDirective implements AfterViewInit {
  // 閉アイコン開アイコン
  @Input('awagMenuGroup') classList = 'bi-plus-square,bi-dash-square';
  // 開閉状態
  private collapsed = true;
  get isCollapsed(): boolean {
    return this.collapsed;
  }
  set isCollapsed(collapsed: boolean) {
    this.collapsed = collapsed;
  }
  // インスタンス化
  constructor(
    private readonly el: ElementRef) {
  }
  // 初期表示
  ngAfterViewInit(): void {
    // アイコン追加
    this.el.nativeElement.querySelector('i').classList.add(this.classList.split(',')[0]);
    // 開く
    setTimeout(() => {
      if (this.el.nativeElement.classList.contains('active')) {
        this.onClick();
      }
    });
  }
  // 開閉
  @HostListener('click') onClick() {
    this.collapsed = !this.collapsed;
    const classList = this.el.nativeElement.querySelector('i').classList;
    classList.toggle(this.classList.split(',')[0], this.collapsed);
    classList.toggle(this.classList.split(',')[1], !this.collapsed);
  }
}
@Injectable()
export class AwagNgbDatepickerI18n extends NgbDatepickerI18n {
  // コンストラクタ
  constructor(
    private readonly awagLanguageSupport: AwagLanguageSupportService,
  ) {
    super();
  }
  // 曜日
  override getWeekdayLabel(weekday: number, width?: Exclude<Intl.DateTimeFormatOptions['weekday'], undefined>): string {
    const lang = this.awagLanguageSupport.getCurrentLanguage();
    const formatter = new Intl.DateTimeFormat(lang, { weekday: 'short' });
    return formatter.format(new Date(1970, 0, 4 + (weekday - 1)));
  }
  // 月（長い表現）
  override getMonthFullName(month: number, year?: number): string {
    const lang = this.awagLanguageSupport.getCurrentLanguage();
    const formatter = new Intl.DateTimeFormat(lang, { month: 'long' });
    return formatter.format(new Date(year ?? 2000, month - 1, 1));
  }
  // 月（短い表現）
  override getMonthShortName(month: number, year?: number): string {
    const lang = this.awagLanguageSupport.getCurrentLanguage();
    const formatter = new Intl.DateTimeFormat(lang, { month: 'short' });
    return formatter.format(new Date(year ?? 2000, month - 1, 1));
  }
  // aria-label向けの値
  override getDayAriaLabel(date: NgbDateStruct): string {
    const lang = this.awagLanguageSupport.getCurrentLanguage();
    const formatter = new Intl.DateTimeFormat(lang, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
    return formatter.format(new Date(date.year, date.month - 1, date.day));
  }
}
@NgModule({
  imports: [
    AwagTabDirective,
    AwagTabContentDirective,
    AwagMenuGroupDirective,
  ],
  exports: [
    AwagTabDirective,
    AwagTabContentDirective,
    AwagMenuGroupDirective,
  ]
})
export class AwagBootstrapComponentsModule {
}
